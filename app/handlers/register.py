import re

from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, ContentType, Message
from loguru import logger

import app.keyboards.inline as inline
import app.keyboards.menu_inline as inlinem
import app.keyboards.reply as reply
from app.api import APIRequest
from app.database.redis import set_cache
from app.database.test import users

register_router = Router()


class RegUserGroup(StatesGroup):
	name = State()
	experience_status = State()
	experience_time = State()
	referal_status = State()
	ubt_is = State()
	ubt_status = State()
	city = State()
	you_source = State()
	about_you = State()
	source_traffic = State()
	number_phone = State()


def validate_name(name: str) -> bool:
	"""
	Validate name by regular expression

	:param		name:  The name
	:type		name:  str

	:returns:	validation status
	:rtype:		bool
	"""
	pattern = r"^[A-za-z–ê-–Ø–∞-—è–Å—ë\s]+\d{1,3}$"

	if re.match(pattern, name):
		return True
	else:
		return False


@register_router.message(Command("start"))
async def cmd_start(message: Message):
	"""
	Command /start

	:param		message:  The message
	:type		message:  Message
	"""
	if users.get(message.chat.id) is not None:
		if users.get(message.chat.id).get("final", False):
			await message.answer(
				"üè†Ô∏è <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!</b>\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SinWin!",
				parse_mode=ParseMode.HTML,
				reply_markup=inlinem.create_main_menu_markup(),
			)
			return

	await message.answer(
		"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ, –¥–ª—è –ø—Ä–æ–¥–æ–ª—ç–µ–Ω–∏—è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –≠—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç.",
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_start_markup(),
	)
	users[message.chat.id] = {"final": False}


@register_router.callback_query(F.data == "submit_reg_request")
async def accept_submitted_reg_request_callback(call: CallbackQuery, state: FSMContext):
	await call.message.edit_text(
		'–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è –í–æ–∑—Ä–∞—Å—Ç" (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω 22):'
	)

	await state.set_state(RegUserGroup.name)


@register_router.message(F.text, RegUserGroup.name)
async def capture_user_name(message: Message, state: FSMContext):
	if not validate_name(message.text):
		await message.answer(
			"–í–≤–µ–¥–∏—Ç–µ –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –í–æ–∑—Ä–∞—Å—Ç\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω 22"
		)

		await state.set_state(RegUserGroup.name)
	else:
		await state.update_data(name=message.text)

		await message.answer(
			"–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞?",
			reply_markup=inline.create_choice_user_experience_markup(),
		)

		await state.set_state(RegUserGroup.experience_status)


@register_router.callback_query(
	F.data.startswith("1set_experience_time"), RegUserGroup.experience_status
)
async def set_experience_status(call: CallbackQuery, state: FSMContext):
	await state.update_data(
		experience_status=(
			"–ù–µ—Ç/–Ω–µ–º–Ω–æ–≥–æ" if call.data.startswith("1set_experience_time_no") else "–î–∞"
		)
	)
	if call.data == "1set_experience_time":
		await call.message.edit_text(
			"–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤/–ª–µ—Ç –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞?\n–ï—Å–ª–∏ –Ω–µ—Ç –≤–∞—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç.",
			reply_markup=inline.create_choice_user_experience_time_markup(),
		)

		await state.set_state(RegUserGroup.experience_time)
		return

	await state.update_data(experience_time=None)

	await call.message.edit_text(
		"–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∫–µ 1 Win?",
		reply_markup=inline.create_referal_connection_markup(),
	)

	await state.set_state(RegUserGroup.referal_status)


@register_router.callback_query(
	F.data.startswith("set_experience_times_"), RegUserGroup.experience_time
)
async def set_experience_time(call: CallbackQuery, state: FSMContext):
	if call.data.startswith("set_experience_times_"):
		if call.data == "set_experience_times_more":
			await state.update_data(experience_time="–ë–æ–ª—å—à–µ")
		elif call.data == "set_experience_times_1month":
			await state.update_data(experience_time="1 –º–µ—Å—è—Ü")
		elif call.data == "set_experience_times_2month":
			await state.update_data(experience_time="2 –º–µ—Å—è—Ü–∞")
		elif call.data == "set_experience_times_3month":
			await state.update_data(experience_time="3 –º–µ—Å—è—Ü–∞")
		elif call.data == "set_experience_times_halfyear":
			await state.update_data(experience_time="–ü–æ–ª–≥–æ–¥–∞")
		elif call.data == "set_experience_times_1year":
			await state.update_data(experience_time="1 –≥–æ–¥")
		elif call.data == "set_experience_times_2year":
			await state.update_data(experience_time="2 –≥–æ–¥–∞")

		try:
			await call.message.edit_text(
				"–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∫–µ 1 Win?",
				reply_markup=inline.create_referal_connection_markup(),
			)
		except:
			await call.message.delete()
			await call.message.answer(
				"–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∫–µ 1 Win?",
				reply_markup=inline.create_referal_connection_markup(),
			)

		await state.set_state(RegUserGroup.referal_status)


@register_router.message(F.text, RegUserGroup.experience_time)
async def set_experience_time_from_message(message: Message, state: FSMContext):
	await state.update_data(experience_time=message.text)

	await message.edit_text(
		"–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∫–µ 1 Win?",
		reply_markup=inline.create_referal_connection_markup(),
	)

	await state.set_state(RegUserGroup.referal_status)


@register_router.callback_query(
	F.data.startswith("referal_status"), RegUserGroup.referal_status
)
async def set_referal_status_callback(call: CallbackQuery, state: FSMContext):
	await state.update_data(
		referal_status=True if F.data == "referal_status_have" else False
	)

	await call.message.edit_text("–ß—Ç–æ —Ç–∞–∫–æ–µ –£–ë–¢ (—Ç—Ä–∞—Ñ–∏–∫)?\n\n–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —ç—Ç–æ.")

	await state.set_state(RegUserGroup.ubt_is)


@register_router.message(F.text, RegUserGroup.ubt_is)
async def set_user_ubt_definition_from_message(message: Message, state: FSMContext):
	await state.update_data(ubt_is=message.text)

	await message.answer(
		"–†–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –≤—ã —Å –£–ë–¢ (—Ç—Ä–∞—Ñ–∏–∫–æ–º)?", reply_markup=inline.create_ubt_markup()
	)

	await state.set_state(RegUserGroup.ubt_status)


@register_router.callback_query(F.data.startswith("use_ubt_"), RegUserGroup.ubt_status)
async def set_ubt_status_callback(call: CallbackQuery, state: FSMContext):
	await call.message.delete()
	await state.update_data(
		ubt_status="–ù–µ—Ç/–Ω–µ–º–Ω–æ–≥–æ" if call.data.startswith("use_ubt_no") else "–î–∞"
	)

	await call.message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?")

	await state.set_state(RegUserGroup.city)


@register_router.message(F.text, RegUserGroup.city)
async def set_city_from_message(message: Message, state: FSMContext):
	await state.update_data(city=message.text)

	await message.answer("–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?")

	await state.set_state(RegUserGroup.you_source)


@register_router.message(F.text, RegUserGroup.you_source)
async def set_source_from_message(message: Message, state: FSMContext):
	await state.update_data(you_source=message.text)

	await message.answer(
		"üí¨ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –æ —Å–µ–±–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –º–æ—Ç–∏–≤–∞–º–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏."
	)

	await state.set_state(RegUserGroup.about_you)


@register_router.message(F.text, RegUserGroup.about_you)
async def set_about_you_from_message(message: Message, state: FSMContext):
	await state.update_data(about_you=message.text)

	await message.answer("–û—Ç–∫—É–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å —Ç—Ä–∞—Ñ–∏–∫?")

	await state.set_state(RegUserGroup.source_traffic)


@register_router.message(F.text, RegUserGroup.source_traffic)
async def set_source_traffic_from_message(message: Message, state: FSMContext):
	await state.update_data(source_traffic=message.text)

	await message.answer(
		"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º.\n\n<i>–û–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –≤ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –í–∞—à –Ω–æ–º–µ—Ä –Ω–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è.</i>",
		parse_mode=ParseMode.HTML,
		reply_markup=reply.create_get_contact_markup(),
	)

	await state.set_state(RegUserGroup.number_phone)


@register_router.message(
	F.content_type == ContentType.CONTACT, RegUserGroup.number_phone
)
async def handle_contact(message: Message, state: FSMContext):
	await state.update_data(number_phone=message.contact.phone_number)

	data = await state.get_data()

	messages = [
		f'‚úÖ –ó–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.\n\n–ò–º—è, –≤–æ–∑—Ä–∞—Å—Ç: {data.get("name")}\n–ì–æ—Ä–æ–¥: {data.get("city")}',
		f'–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ —Ç—Ä–∞—Ñ–∏–∫–∞: {data.get("experience_status")}',
	]

	if data.get("experience_status") == "–î–∞":
		messages.append(f'–û–ø—ã—Ç: {data.get("experience_time")}')

	messages += [
		f'–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∫–µ 1Win: {"–î–∞" if data.get("referal_status") else "–ù–µ—Ç"}',
		f'–ß—Ç–æ —Ç–∞–∫–æ–µ –£–ë–¢ —Ç—Ä–∞—Ñ–∏–∫: {data.get("ubt_is")}',
		f'–û–ø—ã—Ç –≤ –£–ë–¢: {data.get("ubt_status")}',
		f'–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞: {data.get("source_traffic")}',
		f'–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å: {data.get("you_source")}',
		f'–û —Å–µ–±–µ: {data.get("about_you")}',
	]

	messages = "\n".join(messages)

	await message.answer(messages, reply_markup=inline.create_final_req())

	data = {
		"number_phone": str(data.get("number_phone")),
		"fullname": " ".join(data.get("name").split(" ")[:-1]),
		"arbitration_experience": 1 if data.get("experience_status") == "–î–∞" else 0,
		"is_referal": 0,
		"experience_time": (
			data.get("experience_time")
			if data.get("experience_status") == "–î–∞"
			else "–û—Ç—Å—Ç—É—Ç—Å—Ç–≤—É–µ—Ç"
		),
		"age": int("".join(data.get("name").split(" ")[1:])),
		"tg_id": str(message.from_user.id),
	}

	users[message.chat.id] = {"final": False, "data": data}

	await state.clear()


@register_router.callback_query(F.data == "send_request")
async def send_request_callback(call: CallbackQuery):
	users[call.message.chat.id]["final"] = True
	data = users[call.message.chat.id].get("data", {})

	result, status_code = await APIRequest.post("/partner/create", data)

	if not result or status_code != 200:
		logger.error(
			f"Error when reg partner (tg_id: {call.message.from_user.id}). Result of API: {result}"
		)
		await call.message.edit_text(
			"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		)
		return

	await set_cache(result, call.message.from_user.id, "sinwin_partners")

	# await call.message.answer('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', reply_markup=ReplyKeyboardRemove())
	await call.message.edit_text(
		"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É ‚úÖ",
		reply_markup=inline.get_show_menu_markup(),
	)
