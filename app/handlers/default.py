from datetime import datetime, timedelta
from random import randint
from typing import Dict

from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto, Message
from apscheduler.triggers.interval import IntervalTrigger
from dateutil.relativedelta import relativedelta
from loguru import logger
import app.keyboards.menu_inline as inline
from app.api import APIRequest
from app.database.test import users
from app.loader import (
	ACHIEVEMENTS,
	bot,
	config,
	convert_to_human,
	loaded_achievements,
	scheduler,
	user_achievements,
)
from app.utils.algorithms import is_valid_card

only_confirmed = (
	lambda call: users.get(call.from_user.id, {}).get('final', False) is True
	or call.from_user.id in config.secrets.ADMINS_IDS
)  # noqa: E731
message_only_confirmed = (
	lambda message: users.get(message.from_user.id, {}).get('final', False) is True
	or message.from_user.id in config.secrets.ADMINS_IDS
)  # noqa: E731

default_router = Router()
alerts = True

transactions_dict = {}
transactions_schedulded = {}
withdraws_history = {}


LIMITS = {
	'bitcoin': (10650.0, 665000.0),
	'ethereum': (1000.0, 665000.0),
	'tether erc20': (1500.0, 5000000.0),
	'tether trc20': (1500.0, 5000000.0),
	'tether bep20': (1500.0, 5000000.0),
}

last_update_time: Dict[int, datetime] = {}


class CardWithdrawGroup(StatesGroup):
	withdraw_sum = State()
	withdraw_card = State()
	approved = State()


class SteamWithdrawGroup(StatesGroup):
	withdraw_sum = State()
	withdraw_card = State()
	approved = State()


class PhonenumberWithdrawGroup(StatesGroup):
	withdraw_sum = State()
	withdraw_card = State()
	approved = State()


class CryptoWithdrawGroup(StatesGroup):
	withdraw_sum = State()
	withdraw_card = State()
	address = State()
	limit = State()
	approved = State()


class FKWalletWithdrawGroup(StatesGroup):
	withdraw_sum = State()
	withdraw_card = State()
	approved = State()


class PiastrixWithdrawGroup(StatesGroup):
	withdraw_sum = State()
	withdraw_card = State()
	approved = State()


class PromoGroup(StatesGroup):
	promocode = State()


class CancelTransaction(StatesGroup):
	transac = State()
	cancel_reason = State()


async def collect_stats(opts: dict):
	result, status = await APIRequest.post('/user/find', {'opts': opts})

	# if opts.get('game', False):
	# result_incomes, status2 = await APIRequest.get(f"/base/incomes?game={opts['game']}")
	# incomes = result_incomes["income_stat"]
	# postbacks = result_incomes["postbacks_stat"]

	today = datetime.now().date()
	yesterday = today - timedelta(days=1)
	last_week_start = today - timedelta(days=today.weekday() + 7)
	last_week_end = last_week_start + timedelta(days=6)
	last_month_start = today - relativedelta(months=1)
	last_month_end = last_month_start + relativedelta(day=31)

	users = result['users']

	users_count = len(users)
	users_income = sum([user['income'] for user in users])
	users_notreg_count = len([user for user in users if not user['approved']])
	users_nottopup_count = len(
		[user for user in users if user['balance'] < 500.0 and user['approved']]
	)
	users_gamed_count = len(
		[user for user in users if user['balance'] > 500.0 and user['approved']]
	)

	users_today = [
		user
		for user in users
		if datetime.strptime(user['register_date'], '%Y-%m-%dT%H:%M:%S').date() == today
	]
	users_yesterday = [
		user
		for user in users
		if datetime.strptime(user['register_date'], '%Y-%m-%dT%H:%M:%S').date()
		== yesterday
	]
	users_lastweek = [
		user
		for user in users
		if last_week_start
		<= datetime.strptime(user['register_date'], '%Y-%m-%dT%H:%M:%S').date()
		<= last_week_end
	]
	users_month = [
		user
		for user in users
		if last_month_start
		<= datetime.strptime(user['register_date'], '%Y-%m-%dT%H:%M:%S').date()
		<= last_month_end
	]

	users_today = len(users_today)
	users_yesterday = len(users_yesterday)
	users_lastweek = len(users_lastweek)
	users_month = len(users_month)

	return {
		'users_count': users_count,
		'users_today': users_today,
		'users_yesterday': users_yesterday,
		'users_lastweek': users_lastweek,
		'users_month': users_month,
		'users_notreg_count': users_notreg_count,
		'users_nottopup_count': users_nottopup_count,
		'users_gamed_count': users_gamed_count,
		'users_income': users_income,
	}


@default_router.callback_query(F.data == 'statistics', only_confirmed)
async def statistics_callback(call: CallbackQuery):
	result, code = await APIRequest.get('/base/stats')

	stats = result['data']

	if call.from_user.id in config.secrets.ADMINS_IDS:
		data = await collect_stats({})

		today_firstdeps = len([dep['amount'] for dep in stats['today']['firstdep']])
		yesterday_firstdeps = len(
			[dep['amount'] for dep in stats['yesterday']['firstdep']]
		)
		last_week_firstdeps = len(
			[dep['amount'] for dep in stats['last_week']['firstdep']]
		)
		last_month_firstdeps = len(
			[dep['amount'] for dep in stats['last_month']['firstdep']]
		)

		today_deps = (
			sum([dep['amount'] for dep in stats['today']['dep']]) + sum([dep['amount'] for dep in stats['today']['firstdep']])
		)
		yesterday_deps = (
			sum([dep['amount'] for dep in stats['yesterday']['dep']])
			+ sum([dep['amount'] for dep in stats['yesterday']['firstdep']])
		)
		last_week_deps = (
			sum([dep['amount'] for dep in stats['last_week']['dep']])
			+ sum([dep['amount'] for dep in stats['last_week']['firstdep']])
		)
		last_month_deps = (
			sum([dep['amount'] for dep in stats['last_month']['dep']])
			+ sum([dep['amount'] for dep in stats['last_month']['firstdep']])
		)

		today_income = sum([dep['income'] for dep in stats['today']['income']])
		yesterday_income = sum([dep['income'] for dep in stats['yesterday']['income']])
		last_week_income = sum([dep['income'] for dep in stats['last_week']['income']])
		last_month_income = sum(
			[dep['income'] for dep in stats['last_month']['income']]
		)

		alltime_deps = today_deps + yesterday_deps + last_week_deps + last_month_deps
		alltime_firstdeps = (
			today_firstdeps
			+ yesterday_firstdeps
			+ last_week_firstdeps
			+ last_month_firstdeps
		)
		alltime_income = (
			today_income + yesterday_income + last_week_income + last_month_income
		)

		balance, status_code = await APIRequest.get('/base/admin_balance')

		signals_gens = [
			[info[k] for k, _ in info.items()] for _, info in result['signals'].items()
		]
		signals_gens = sum(sum(x) for x in signals_gens)

		api_count = sum([apinum for partnerhash, apinum in result['api_count'].items()])

		messages = [
			'<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ë–û–¢–ê–ú</b>\n',
			f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {balance["balance"]} RUB\n',
			f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data["users_count"]}',
			f'–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_deps}',
			f'–î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_income}',
			f'–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_firstdeps}',
			f'API –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {api_count}',
			f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_gens}\n',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data["users_notreg_count"]}',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {data["users_nottopup_count"]}',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–≥—Ä—ã: {data["users_gamed_count"]}\n',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data["users_today"]}',
			f'‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞: {data["users_yesterday"]}',
			f'‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {data["users_lastweek"]}',
			f'‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {data["users_month"]}\n',
			f'–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_deps}',
			f'‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_deps}',
			f'‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_deps}',
			f'‚îî –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {last_month_deps}\n',
			f'–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_firstdeps}',
			f'‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {yesterday_firstdeps}',
			f'‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_firstdeps}',
			f'‚îî –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {last_month_firstdeps}\n',
			f'–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_income}',
			f'‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_income}',
			f'‚îú –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_income}',
			f'‚îî –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {last_month_income}',
		]
	else:
		partners = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': call.from_user.id}}
		)
		partner = partners[0]['partners'][-1]

		if not partner['approved']:
			users[call.from_user.id] = users.get(call.from_user.id, {})
			users[call.from_user.id]['final'] = False
			await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
			return

		opts = {'referal_parent': partner['partner_hash']}

		data = await collect_stats(opts)

		api_count = result['api_count'].get(partner['partner_hash'], 0)

		today_firstdeps = len(
			[
				dep['amount']
				for dep in stats['today']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		yesterday_firstdeps = len(
			[
				dep['amount']
				for dep in stats['yesterday']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_week_firstdeps = len(
			[
				dep['amount']
				for dep in stats['last_week']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_month_firstdeps = len(
			[
				dep['amount']
				for dep in stats['last_month']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)

		today_deps = sum(
			[
				dep['amount']
				for dep in stats['today']['dep']
				if dep['partner_hash'] == partner['partner_hash']
			]) + sum([
				dep['amount']
				for dep in stats['today']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			])

		yesterday_deps = sum(
			[
				dep['amount']
				for dep in stats['yesterday']['dep']
				if dep['partner_hash'] == partner['partner_hash']
			]) + sum([
				dep['amount']
				for dep in stats['yesterday']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			])

		last_week_deps = sum(
			[
				dep['amount']
				for dep in stats['last_week']['dep']
				if dep['partner_hash'] == partner['partner_hash']
			]) + sum([
				dep['amount']
				for dep in stats['last_week']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			])
		last_month_deps = sum(
			[
				dep['amount']
				for dep in stats['last_month']['dep']
				if dep['partner_hash'] == partner['partner_hash']
			]) + sum([
				dep['amount']
				for dep in stats['last_month']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			])

		today_income = sum(
			[
				dep['x']
				for dep in stats['today']['income']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		yesterday_income = sum(
			[
				dep['x']
				for dep in stats['yesterday']['income']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_week_income = sum(
			[
				dep['x']
				for dep in stats['last_week']['income']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_month_income = sum(
			[
				dep['x']
				for dep in stats['last_month']['income']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)

		alltime_deps = today_deps + yesterday_deps + last_week_deps + last_month_deps
		alltime_firstdeps = (
			today_firstdeps
			+ yesterday_firstdeps
			+ last_week_firstdeps
			+ last_month_firstdeps
		)
		alltime_income = (
			today_income + yesterday_income + last_week_income + last_month_income
		)

		signals_gens = sum(
			[info[partner['partner_hash']] for _, info in result['signals'].items()]
		)

		messages = [
			'<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ë–û–¢–ê–ú</b>',
			'<code>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º</code>\n',
			f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n',
			f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data["users_count"]}',
			f'–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_deps}',
			f'–î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_income}',
			f'–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_firstdeps}',
			f'API –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {api_count}',
			f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_gens}\n',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data["users_notreg_count"]}',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {data["users_nottopup_count"]}',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–≥—Ä—ã: {data["users_gamed_count"]}\n',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data["users_today"]}',
			f'‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞: {data["users_yesterday"]}',
			f'‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {data["users_lastweek"]}',
			f'‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {data["users_month"]}\n',
			f'–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_deps}',
			f'‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_deps}',
			f'‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_deps}',
			f'‚îî –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {last_month_deps}\n',
			f'–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_firstdeps}',
			f'‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {yesterday_firstdeps}',
			f'‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_firstdeps}',
			f'‚îî –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {last_month_firstdeps}\n',
			f'–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_income}',
			f'‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_income}',
			f'‚îú –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_income}',
			f'‚îî –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {last_month_income}',
		]

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_statistics_bot_menu(),
	)


@default_router.callback_query(F.data == 'statistics_mines', only_confirmed)
async def statistics_mines_callback(call: CallbackQuery):
	result, code = await APIRequest.get('/base/stats')

	stats = result['data']

	if call.from_user.id in config.secrets.ADMINS_IDS:
		data = await collect_stats({'game': 'Mines'})

		api_count = sum([apinum for partnerhash, apinum in result['api_count'].items()])

		today_firstdeps = len(
			[
				dep['amount']
				for dep in stats['today']['firstdep']
				if dep['game'] == 'Mines'
			]
		)
		yesterday_firstdeps = len(
			[
				dep['amount']
				for dep in stats['yesterday']['firstdep']
				if dep['game'] == 'Mines'
			]
		)
		last_week_firstdeps = len(
			[
				dep['amount']
				for dep in stats['last_week']['firstdep']
				if dep['game'] == 'Mines'
			]
		)
		last_month_firstdeps = len(
			[
				dep['amount']
				for dep in stats['last_month']['firstdep']
				if dep['game'] == 'Mines'
			]
		)

		today_deps = sum([
				dep['amount']
				for dep in stats['today']['firstdep']
				if dep['game'] == 'Mines'
			]) + sum(
			[dep['amount'] for dep in stats['today']['dep'] if dep['game'] == 'Mines']
		)
		yesterday_deps = sum([
				dep['amount']
				for dep in stats['yesterday']['firstdep']
				if dep['game'] == 'Mines'
			]) + sum(
			[
				dep['amount']
				for dep in stats['yesterday']['dep']
				if dep['game'] == 'Mines'
			]
		)
		last_week_deps = sum([
				dep['amount']
				for dep in stats['last_week']['firstdep']
				if dep['game'] == 'Mines'
			]) + sum(
			[
				dep['amount']
				for dep in stats['last_week']['dep']
				if dep['game'] == 'Mines'
			]
		)
		last_month_deps = sum([
				dep['amount']
				for dep in stats['last_month']['firstdep']
				if dep['game'] == 'Mines'
			]) + sum(
			[
				dep['amount']
				for dep in stats['last_month']['dep']
				if dep['game'] == 'Mines'
			]
		)

		today_income = sum(
			[
				dep['income']
				for dep in stats['today']['income']
				if dep['game'] == 'Mines'
			]
		)
		yesterday_income = sum(
			[
				dep['income']
				for dep in stats['yesterday']['income']
				if dep['game'] == 'Mines'
			]
		)
		last_week_income = sum(
			[
				dep['income']
				for dep in stats['last_week']['income']
				if dep['game'] == 'Mines'
			]
		)
		last_month_income = sum(
			[
				dep['income']
				for dep in stats['last_month']['income']
				if dep['game'] == 'Mines'
			]
		)

		alltime_deps = today_deps + yesterday_deps + last_week_deps + last_month_deps
		alltime_firstdeps = (
			today_firstdeps
			+ yesterday_firstdeps
			+ last_week_firstdeps
			+ last_month_firstdeps
		)
		alltime_income = (
			today_income + yesterday_income + last_week_income + last_month_income
		)

		signals_gens = [
			[info[k] for k, _ in info.items()]
			for name, info in result['signals'].items()
			if name == 'Mines'
		]
		signals_gens = sum(sum(x) for x in signals_gens)

		balance, status_code = await APIRequest.get('/base/admin_balance')

		messages = [
			'<b>üí£Ô∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û MINES</b>\n',
			f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {balance["balance"]} RUB\n',
			f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data["users_count"]}',
			f'–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_deps}',
			f'–î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_income}',
			f'–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_firstdeps}',
			f'API –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {api_count}',
			f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_gens}\n',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data["users_notreg_count"]}',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {data["users_nottopup_count"]}',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–≥—Ä—ã: {data["users_gamed_count"]}\n',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data["users_today"]}',
			f'‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞: {data["users_yesterday"]}',
			f'‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {data["users_lastweek"]}',
			f'‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {data["users_month"]}\n',
			f'–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_deps}',
			f'‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_deps}',
			f'‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_deps}',
			f'‚îî –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {last_month_deps}\n',
			f'–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_firstdeps}',
			f'‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {yesterday_firstdeps}',
			f'‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_firstdeps}',
			f'‚îî –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {last_month_firstdeps}\n',
			f'–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_income}',
			f'‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_income}',
			f'‚îú –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_income}',
			f'‚îî –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {last_month_income}',
		]
	else:
		partners = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': call.from_user.id}}
		)
		partner = partners[0]['partners'][-1]

		if not partner['approved']:
			print(partner)
			users[call.from_user.id] = users.get(call.from_user.id, {})
			users[call.from_user.id]['final'] = False
			await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
			return

		opts = {'game': 'Mines', 'referal_parent': partner['partner_hash']}

		data = await collect_stats(opts)

		api_count = result['api_count'].get(partner['partner_hash'], 0)

		today_firstdeps = len(
			[
				dep['amount']
				for dep in stats['today']['firstdep']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]
		)
		yesterday_firstdeps = len(
			[
				dep['amount']
				for dep in stats['yesterday']['firstdep']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_week_firstdeps = len(
			[
				dep['amount']
				for dep in stats['last_week']['firstdep']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_month_firstdeps = len(
			[
				dep['amount']
				for dep in stats['last_month']['firstdep']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]
		)

		today_deps = sum([
				dep['amount']
				for dep in stats['today']['firstdep']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]) + sum(
			[
				dep['amount']
				for dep in stats['today']['dep']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]
		)
		yesterday_deps = sum([
				dep['amount']
				for dep in stats['yesterday']['firstdep']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]) + sum(
			[
				dep['amount']
				for dep in stats['yesterday']['dep']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_week_deps = sum([
				dep['amount']
				for dep in stats['last_week']['firstdep']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]) + sum(
			[
				dep['amount']
				for dep in stats['last_week']['dep']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_month_deps = sum([
				dep['amount']
				for dep in stats['last_month']['firstdep']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]) + sum(
			[
				dep['amount']
				for dep in stats['last_month']['dep']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]
		)

		today_income = sum(
			[
				dep['x']
				for dep in stats['today']['income']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]
		)
		yesterday_income = sum(
			[
				dep['x']
				for dep in stats['yesterday']['income']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_week_income = sum(
			[
				dep['x']
				for dep in stats['last_week']['income']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_month_income = sum(
			[
				dep['x']
				for dep in stats['last_month']['income']
				if dep['game'] == 'Mines'
				and dep['partner_hash'] == partner['partner_hash']
			]
		)

		alltime_deps = today_deps + yesterday_deps + last_week_deps + last_month_deps
		alltime_firstdeps = (
			today_firstdeps
			+ yesterday_firstdeps
			+ last_week_firstdeps
			+ last_month_firstdeps
		)
		alltime_income = (
			today_income + yesterday_income + last_week_income + last_month_income
		)

		signals_gens = sum(
			[info[partner['partner_hash']] for _, info in result['signals'].items()]
		)

		messages = [
			'<b>üí£Ô∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û MINES</b>',
			'<code>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º</code>\n',
			f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n',
			f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data["users_count"]}',
			f'–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_deps}',
			f'–î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_income}',
			f'–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_firstdeps}',
			f'API –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {api_count}',
			f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_gens}\n',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data["users_notreg_count"]}',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {data["users_nottopup_count"]}',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–≥—Ä—ã: {data["users_gamed_count"]}\n',
			f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data["users_today"]}',
			f'‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞: {data["users_yesterday"]}',
			f'‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {data["users_lastweek"]}',
			f'‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {data["users_month"]}\n',
			f'–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_deps}',
			f'‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_deps}',
			f'‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_deps}',
			f'‚îî –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {last_month_deps}\n',
			f'–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_firstdeps}',
			f'‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {yesterday_firstdeps}',
			f'‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_firstdeps}',
			f'‚îî –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {last_month_firstdeps}\n',
			f'–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_income}',
			f'‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_income}',
			f'‚îú –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_income}',
			f'‚îî –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {last_month_income}',
		]

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_mines_statistics_menu(),
	)


@default_router.callback_query(F.data.startswith('referal'), only_confirmed)
async def referal_callback(call: CallbackQuery):
	if call.from_user.id in config.secrets.ADMINS_IDS:
		messages = [
			'–ü–æ–º–æ–≥–∏—Ç–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ!\n',
			'–ú—ã –∏—â–µ–º —Ç–æ–ª—å–∫–æ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ —Å –æ–ø—ã—Ç–æ–º –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ.\n\n<code>üí∞Ô∏è –£—Å–ª–æ–≤–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è</code>\n',
			'<b>–î–ª—è –≤–∞—Å:</b>',
			'–í—ã –ø–æ–ª—É—á–∏—Ç–µ 15 000 —Ä—É–±–ª–µ–π –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–π–¥–µ—Ç –¥–æ —Å—Ç–∞—Ç—É—Å–∞ "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª".\n',
			'<b>–î–ª—è –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞:</b>',
			'–í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç —Å—Ç–∞—Ç—É—Å "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 40%" –≤–º–µ—Å—Ç–æ "–ù–æ–≤–∏—á–æ–∫ 35%" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ —Ä–∞–±–æ—Ç—ã.\n',
			'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/SinWin_work_bot?start={hash}</code>',
		]
	else:
		partners = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': call.from_user.id}}
		)
		partner = partners[0]['partners'][-1]
		messages = [
			'–ü–æ–º–æ–≥–∏—Ç–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ!\n',
			'–ú—ã –∏—â–µ–º —Ç–æ–ª—å–∫–æ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ —Å –æ–ø—ã—Ç–æ–º –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ.\n\n<code>üí∞Ô∏è –£—Å–ª–æ–≤–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è</code>\n',
			'<b>–î–ª—è –≤–∞—Å:</b>',
			'–í—ã –ø–æ–ª—É—á–∏—Ç–µ 15 000 —Ä—É–±–ª–µ–π –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–π–¥–µ—Ç –¥–æ —Å—Ç–∞—Ç—É—Å–∞ "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª".\n',
			'<b>–î–ª—è –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞:</b>',
			'–í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç —Å—Ç–∞—Ç—É—Å "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 40%" –≤–º–µ—Å—Ç–æ "–ù–æ–≤–∏—á–æ–∫ 35%" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ —Ä–∞–±–æ—Ç—ã.\n',
			f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/SinWin_work_bot?start={partner["partner_hash"]}</code>',
		]

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_referals_markup(),
	)


@default_router.callback_query(F.data.startswith('about_us'), only_confirmed)
async def about_uscallback(call: CallbackQuery):
	messages = [
		'–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –Ω–∞ <a href="https://t.me/+W8_28FXJWXIxZTgy">–∫–∞–Ω–∞–ª–µ SinWin</a>. –¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≤–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.\n',
		'–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! –ú—ã –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É, –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å–∞–º, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏ –æ—Ç–∑—ã–≤–∞–º.\n',
		'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SinWin!',
	]

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_about_us_markup(),
	)


@default_router.callback_query(F.data.startswith('my_referals'), only_confirmed)
async def referal_answer_callback(call: CallbackQuery):
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	try:
		partner = partners[0]['partners'][-1]
	except Exception:
		return

	cpartners = await APIRequest.post(
		'/partner/find', {'opts': {'referrer_hash': partner['partner_hash']}}
	)
	cpartner = cpartners[0]['partners']

	# if rpartner:
	# 	await bot.send_message(chat_id=rpartner['tg_id'], text=f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: #{tid}\n–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(cpartner)}')

	if len(cpartner) == 0:
		await call.answer('–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', show_alert=True)
	else:
		items = []

		for cp in cpartner:
			regdate = datetime.strptime(cp['register_date'], '%Y-%m-%dT%H:%M:%S')
			regdate = regdate.strftime('%H:%M %d/%m/%Y')
			items.append(f'{regdate} - {cp["tg_id"]} - {cp["status"]}')

		items = '\n'.join(items)

		await call.message.answer(
			f"""
–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {partner['ref_income']} —Ä—É–±–ª–µ–π  

üèÜ –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {len(cpartner)} –î–∞—Ç–∞ - –¢–µ–ª–µ–≥—Ä–∞–º id - –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

{items}

–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–ø–µ—á–∞—Ç–ª—è—é—Ç! –ù–µ —Å–±–∞–≤–ª—è–π—Ç–µ —Ç–µ–º–ø –∏ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –µ—â–µ –±–æ–ª—å—à–µ–º—É —É—Å–ø–µ—Ö—É.		
""",
			reply_markup=inline.create_referals_markup(),
		)


def check_achievements(
	users_count,
	income,
	deposits_sum,
	first_deposits_count,
	referrals_count,
	signals_count,
):
	achievements = [
		'üèÜÔ∏è –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n',
	]

	thresholds = {
		'users_count': ['0'],
		'deposits_sum': ['0'],
		'income': ['0'],
		'first_deposits_count': ['0'],
		'referrals_count': ['0'],
		'signals_count': ['0'],
	}

	for threshold in ACHIEVEMENTS['users']:
		if users_count >= threshold:
			thresholds['users_count'].append(str(threshold))

	for threshold in ACHIEVEMENTS['deposits']:
		if deposits_sum >= threshold:
			thresholds['deposits_sum'].append(convert_to_human(threshold))

	for threshold in ACHIEVEMENTS['income']:
		if income >= threshold:
			thresholds['income'].append(convert_to_human(threshold))

	for threshold in ACHIEVEMENTS['first_deposits']:
		if first_deposits_count >= threshold:
			thresholds['first_deposits_count'].append(str(threshold))

	for threshold in ACHIEVEMENTS['referrals']:
		if referrals_count >= threshold:
			thresholds['referrals_count'].append(str(threshold))

	for threshold in ACHIEVEMENTS['signals']:
		if signals_count >= threshold:
			thresholds['signals_count'].append(str(threshold))

	count = (
		len(thresholds['users_count'])
		+ len(thresholds['referrals_count'])
		+ len(thresholds['signals_count'])
		+ len(thresholds['deposits_sum'])
		+ len(thresholds['income'])
		+ len(thresholds['first_deposits_count'])
		- 6
	)

	achievements.append(
		f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\n\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –í–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º: {", ".join(thresholds["users_count"])}\n'
	)
	achievements.append(f'‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã: {",".join(thresholds["deposits_sum"])}\n')
	achievements.append(f'‚úÖ –î–æ—Ö–æ–¥: {",".join(thresholds["income"])}\n')
	achievements.append(
		f'‚úÖ –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã: {",".join(thresholds["first_deposits_count"])}\n'
	)
	achievements.append(f'‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—ã: {",".join(thresholds["referrals_count"])}\n')
	achievements.append(
		f'‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {",".join(thresholds["signals_count"])}'
	)

	return achievements


def check_achievements_for_reload(
	users_count,
	income,
	deposits_sum,
	first_deposits_count,
	referrals_count,
	signals_count,
):
	thresholds = {
		'users_count': [str(users_count)],
		'deposits_sum': [str(deposits_sum)],
		'income': [str(income)],
		'first_deposits_count': [str(first_deposits_count)],
		'referrals_count': [str(referrals_count)],
		'signals_count': [str(signals_count)],
	}

	for threshold in ACHIEVEMENTS['users']:
		if users_count >= threshold:
			thresholds['users_count'].append(str(threshold))

	for threshold in ACHIEVEMENTS['deposits']:
		if deposits_sum >= threshold:
			thresholds['deposits_sum'].append(convert_to_human(threshold))

	for threshold in ACHIEVEMENTS['income']:
		if income >= threshold:
			thresholds['income'].append(convert_to_human(threshold))

	for threshold in ACHIEVEMENTS['first_deposits']:
		if first_deposits_count >= threshold:
			thresholds['first_deposits_count'].append(str(threshold))

	for threshold in ACHIEVEMENTS['referrals']:
		if referrals_count <= threshold:
			thresholds['referrals_count'].append(str(threshold))
			break

	for threshold in ACHIEVEMENTS['signals']:
		if signals_count < threshold:
			thresholds['signals_count'].append(str(threshold))
			break

	count = (
		len(thresholds['users_count'])
		+ len(thresholds['signals_count'])
		+ len(thresholds['deposits_sum'])
		+ len(thresholds['income'])
		+ len(thresholds['first_deposits_count'])
		+ len(thresholds['referrals_count'])
		- 6
	)

	return {
		'count': count,
		'thresholds': thresholds,
	}


@default_router.callback_query(F.data.startswith('reload_achievs'), only_confirmed)
async def reload_achievs_callback(call: CallbackQuery):
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners']

	if last_update_time.get(call.from_user.id) is not None:
		time_difference = datetime.now() - last_update_time.get(call.from_user.id)

		if time_difference.total_seconds() < 60:
			await call.answer('–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, –æ–±–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É')
			return

	last_update_time[call.from_user.id] = datetime.now()

	if partner:
		partner = partner[-1]
	else:
		await call.answer('–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ')

	if not partner['approved']:
		print(partner)
		users[call.from_user.id] = users.get(call.from_user.id, {})
		users[call.from_user.id]['final'] = False
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	result, code = await APIRequest.get(
		f'/base/achstats?partnerhash={partner["partner_hash"]}'
	)

	cpartners = await APIRequest.post(
		'/partner/find', {'opts': {'referrer_hash': partner['partner_hash']}}
	)
	cpartners = cpartners[0]['partners']

	opts = {'game': 'Mines', 'referal_parent': partner['partner_hash']}
	data = await collect_stats(opts)

	achievements = check_achievements_for_reload(
		data['users_count'],
		result['income'],
		result['deposits_sum'],
		result['first_deposits_count'],
		len(cpartners),
		result['signals_count'],
	)

	count = achievements['count']
	thresholds = achievements['thresholds']

	# thresholds_data = {
	# 	'users_count': ['0'],
	# 	'deposits_sum': ['0'],
	# 	'income': ['0'],
	# 	'first_deposits_count': ['0'],
	# }

	loaded_achievs = loaded_achievements.get(call.from_user.id, {})

	loaded_achievements[call.from_user.id] = achievements

	loaded_count = loaded_achievs.get('count')

	if loaded_count > count:
		loaded_thresholds = loaded_achievs['thresholds']

		users_count = list(
			set(loaded_thresholds['users_count']) - set(thresholds['users_count'])
		)
		deposits_sum = list(
			set(loaded_thresholds['deposits_sum']) - set(thresholds['deposits_sum'])
		)
		income = list(set(loaded_thresholds['income']) - set(thresholds['income']))
		first_deposits_count = list(
			set(loaded_thresholds['first_deposits_count'])
			- set(thresholds['first_deposits_count'])
		)
		referrals_count = list(
			set(loaded_thresholds['referrals_count'])
			- set(thresholds['referrals_count'])
		)
		signals_count = list(
			set(loaded_thresholds['signals_count']) - set(thresholds['signals_count'])
		)

		if users_count:
			for data in users_count:
				await call.message.answer(
					f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º: –±–æ–ª—å—à–µ {data}.'
				)

		if deposits_sum:
			for data in deposits_sum:
				await call.message.answer(
					f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n\n‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã: –±–æ–ª—å—à–µ {convert_to_human(data)} —Ä—É–±–ª–µ–π.'
				)

		if income:
			for data in income:
				await call.message.answer(
					f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n\n‚úÖ –î–æ—Ö–æ–¥: –±–æ–ª—å—à–µ {convert_to_human(data)} —Ä—É–±–ª–µ–π.'
				)

		if first_deposits_count:
			for data in first_deposits_count:
				await call.message.answer(
					f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n\n‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: –±–æ–ª—å—à–µ {data}.'
				)

		if referrals_count:
			for data in referrals_count:
				await call.message.answer(
					f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n\n‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –±–æ–ª—å—à–µ {data}.'
				)

		if signals_count:
			for data in signals_count:
				await call.message.answer(
					f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: –±–æ–ª—å—à–µ {data}.'
				)

		achievements = check_achievements_var2(
			data['users_count'],
			result['income'],
			result['deposits_sum'],
			result['first_deposits_count'],
			len(cpartners),
			result['signals_count'],
		)

		data = user_achievements.get(call.from_user.id, {})
		data['achievements'] = achievements
		user_achievements[call.from_user.id] = data
	else:
		await call.answer('–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
	# await call.answer("–û–±–Ω–æ–≤–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", show_alert=True)


@default_router.callback_query(F.data.startswith('my_achievs'), only_confirmed)
async def my_achievs_callback(call: CallbackQuery):
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners']

	messages = []

	if partner:
		partner = partner[-1]
	else:
		await call.answer('–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ')

	if not partner['approved']:
		print(partner)
		users[call.from_user.id] = users.get(call.from_user.id, {})
		users[call.from_user.id]['final'] = False
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	result, code = await APIRequest.get(
		f'/base/achstats?partnerhash={partner["partner_hash"]}'
	)

	cpartners = await APIRequest.post(
		'/partner/find', {'opts': {'referrer_hash': partner['partner_hash']}}
	)
	cpartners = cpartners[0]['partners']

	opts = {'game': 'Mines', 'referal_parent': partner['partner_hash']}
	data = await collect_stats(opts)

	achievements = check_achievements(
		data['users_count'],
		result['income'],
		result['deposits_sum'],
		result['first_deposits_count'],
		len(cpartners),
		result['signals_count'],
	)

	messages += achievements

	messages.append('\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç! üåü')

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup('achievements'),
	)

	messages = []


def check_achievements_var2(
	users_count,
	income,
	deposits_sum,
	first_deposits_count,
	referrals_count,
	signals_count,
):
	achievements = [
		'üèÜÔ∏è –í–∞—à–∏ –¶–µ–ª–∏:\n',
	]

	for threshold in ACHIEVEMENTS['users']:
		if users_count >= threshold:
			continue
		elif users_count < threshold:
			achievements.append(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º: {threshold}')
			break

	for threshold in ACHIEVEMENTS['deposits']:
		if deposits_sum >= threshold:
			continue
		elif deposits_sum < threshold:
			achievements.append(f'‚ùå –î–µ–ø–æ–∑–∏—Ç—ã: {convert_to_human(threshold)} —Ä—É–±–ª–µ–π')
			break

	for threshold in ACHIEVEMENTS['income']:
		if income >= threshold:
			continue
		if income < threshold:
			achievements.append(f'‚ùå –î–æ—Ö–æ–¥: {convert_to_human(threshold)} —Ä—É–±–ª–µ–π')
			break

	for threshold in ACHIEVEMENTS['first_deposits']:
		if first_deposits_count >= threshold:
			continue
		elif first_deposits_count < threshold:
			achievements.append(f'‚ùå –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã: {threshold}')
			break

	for threshold in ACHIEVEMENTS['referrals']:
		if referrals_count >= threshold:
			continue
		elif referrals_count < threshold:
			achievements.append(f'‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {threshold}')
			break

	for threshold in ACHIEVEMENTS['signals']:
		if signals_count >= threshold:
			continue
		elif signals_count < threshold:
			achievements.append(f'‚ùå –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {threshold}')
			break

	return achievements


@default_router.callback_query(F.data.startswith('achievements'), only_confirmed)
async def achievements_callback(call: CallbackQuery):
	if call.data == 'achievements_false':
		data = user_achievements.get(call.from_user.id, {})
		data['alerts'] = False
		user_achievements[call.from_user.id] = data
	elif call.data == 'achievements_true':
		data = user_achievements.get(call.from_user.id, {})
		data['alerts'] = True
		user_achievements[call.from_user.id] = data

	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners']

	messages = []

	if partner:
		partner = partner[-1]
	else:
		await call.answer('–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ')

	if not partner['approved']:
		print(partner)
		users[call.from_user.id] = users.get(call.from_user.id, {})
		users[call.from_user.id]['final'] = False
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	if user_achievements.get(call.from_user.id, {}).get('achievements', []):
		achievements = user_achievements.get(call.from_user.id, {})

		messages += achievements['achievements']
	else:
		result, code = await APIRequest.get(
			f'/base/achstats?partnerhash={partner["partner_hash"]}'
		)

		cpartners = await APIRequest.post(
			'/partner/find', {'opts': {'referrer_hash': partner['referrer_hash'], "is_referal": True}}
		)
		cpartners = cpartners[0]['partners']

		logger.error(len(cpartners))

		opts = {'game': 'Mines', 'referal_parent': partner['partner_hash']}
		data = await collect_stats(opts)

		achievements = check_achievements_var2(
			data['users_count'],
			result['income'],
			result['deposits_sum'],
			result['first_deposits_count'],
			len(cpartners),
			result['signals_count'],
		)

		loaded_achievements[call.from_user.id] = check_achievements_for_reload(
			data['users_count'],
			result['income'],
			result['deposits_sum'],
			result['first_deposits_count'],
			len(cpartners),
			result['signals_count'],
		)

		messages += achievements

		data = user_achievements.get(call.from_user.id, {})
		data['achievements'] = achievements
		user_achievements[call.from_user.id] = data

	messages += [
		(
			'\n‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n'
			if user_achievements.get(call.from_user.id, {}).get('alerts', True)
			else '\n‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã\n'
		),
		'–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç! üåü',
	]

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_achievements_markup(
			user_achievements.get(call.from_user.id, {}).get('alerts', True)
		),
	)

	messages = []


@default_router.callback_query(F.data == 'record_creo', only_confirmed)
async def record_creo_callback(call: CallbackQuery):
	messages = [
		'–í —ç—Ç–∏—Ö –±–æ—Ç–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∑–∞–ø–∏—Å–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã:\n',
		'Mines –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∏–Ω: @iZiMinsBot',
		'Mines –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–Ω: @iZiMin_Bot',
		'Speed Cash: @SPDCashsBot',
		'LuckyJet: @CashJetsBot',
		'Coin Flip: @WinFlipsBot\n',
		'–î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º–∏ –±–æ—Ç–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π. –í –Ω–µ–π –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤.',
	]
	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_record_creo_markup(),
	)


@default_router.callback_query(F.data == 'work', only_confirmed)
async def work_callback(call: CallbackQuery):
	try:
		partners = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': call.from_user.id}}
		)
		partner = partners[0]['partners'][-1]
	except Exception:
		messages = [
			'üíªÔ∏è WORK\n\n<b>–°–°–´–õ–ö–ò –ù–ê –ë–û–¢–û–í</b>\nMines - <code>https://t.me/IziMin_test_Bot</code>',
			'Lucky Jet - <code>https://t.me/CashJetBot</code>',
			'Speed Cash - <code>https://t.me/SPDCashBot</code>',
			'Coin Flip - <code>https://t.me/CoinFlipBot</code>',
		]
		await call.message.edit_text(
			'\n'.join(messages),
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_work_markup(),
		)
		return

	partner_hash = partner.get('partner_hash', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
	messages = [
		f'üíªÔ∏è WORK\n\n<b>–°–°–´–õ–ö–ò –ù–ê –ë–û–¢–û–í</b>\nMines - <code>https://t.me/IziMin_test_Bot?start={partner_hash}</code>',
		f'Lucky Jet - <code>https://t.me/CashJetBot?start={partner_hash}</code>',
		f'Speed Cash - <code>https://t.me/SPDCashBot?start={partner_hash}</code>',
		f'Coin Flip - <code>https://t.me/CoinFlipBot?start={partner_hash}</code>',
	]
	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_work_markup(),
	)


@default_router.callback_query(F.data.startswith('showmenu'), only_confirmed)
async def showmenu_callback(call: CallbackQuery):
	try:
		await call.message.edit_text(
			'üè†Ô∏è <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!</b>\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SinWin!',
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_main_menu_markup(call.from_user.id),
		)
	except Exception:
		await call.message.delete()
		await call.message.answer(
			'üè†Ô∏è <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!</b>\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SinWin!',
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_main_menu_markup(call.from_user.id),
		)


@default_router.callback_query(F.data.startswith('admin_'), only_confirmed)
async def adminpanel_query_callback(call: CallbackQuery):
	await call.message.edit_text(
		'–ó–ê–ì–õ–£–®–ö–ê', reply_markup=inline.create_back_markup('showmenu')
	)


@default_router.callback_query(F.data == 'adminpanel')
async def adminpanel_callback(call: CallbackQuery):
	# ‚îî‚îè ‚îú„Äå‚îå
	messages = [
		'‚îå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∫–µ: 10',
		'‚îú –ë–∞–ª–∞–Ω—Å –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∏: 100 000 —Ä—É–±–ª–µ–π',
		'‚îú –î–æ—Ö–æ–¥ –±–æ—Ç–∞: 10 000 000 —Ä—É–±–ª–µ–π',
		'‚îú –ë–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 15 000 500 —Ä—É–±–ª–µ–π',
		f'‚îî –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤—ã–≤–æ–¥ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}: 100 000 —Ä—É–±–ª–µ–π',
	]

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_adminpanel_markup(),
	)


@default_router.callback_query(F.data == 'top_workers', only_confirmed)
async def top_workers_callback(call: CallbackQuery):
	# ü•áü•àü•âüèÖ
	result, code = await APIRequest.get('/base/stats?exclude=1')

	stats = result['data']
	income = (
		stats['last_month']['income']
		+ stats['today']['income']
		+ stats['last_week']['income']
		+ stats['yesterday']['income']
	)

	userp = None
	status = False
	state = 0

	partners = {}

	if call.from_user.id not in config.secrets.ADMINS_IDS:
		result = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': call.from_user.id}}
		)
		user = result[0]['partners']

		if user:
			user = user[-1]
			userp = user['partner_hash']
		else:
			await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
			return

	print(income)

	for partner in income:
		partner_hash = partner['partner_hash']
		if userp == partner_hash:
			status = True

		partners[partner_hash] = partner['x']

	partners = dict(sorted(partners.items(), key=lambda item: item[1], reverse=True))

	partners = dict(list(partners.items())[:5])

	if status:
		state = list(partners).index(userp) + 1

	messages = [
		'üèÜÔ∏è –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø–æ –¥–æ—Ö–æ–¥—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü',
	]

	for i, (partner_hash, income) in enumerate(partners.items()):
		messages.append('')
		partner_hash = partner_hash[:3] + '****' + partner_hash[7:]

		if i == 0:
			messages.append(f'ü•á {partner_hash}: {income} —Ä—É–±–ª–µ–π')
		elif i == 1:
			messages.append(f'ü•à {partner_hash}: {income} —Ä—É–±–ª–µ–π')
		elif i == 3:
			messages.append(f'ü•â {partner_hash}: {income} —Ä—É–±–ª–µ–π')
		else:
			messages.append(f'üèÖ {partner_hash}: {income} —Ä—É–±–ª–µ–π')

	if status:
		messages.append(f'üëΩÔ∏è –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ: {state}\n')
	else:
		messages.append('')

	messages += [
		'üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω—É–ª—è–µ—Ç—Å—è 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.\n',
		'<code>üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–Ω—è–≤—à–∏–π –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ, –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ, –µ—Å–ª–∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª" –∏–ª–∏ –Ω–∏–∂–µ.</code>',
		'<code>üíµ –í—Ç–æ—Ä–æ–µ –∏ —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–∞ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–º–∏—é.</code>\n\n'
		'üöÄ –£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç!',
	]

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup('showmenu'),
	)


@default_router.callback_query(F.data == 'withdraws_history', only_confirmed)
async def withdraws_history_callback(call: CallbackQuery):
	# üü¢üü°‚ö™Ô∏è
	result = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	user = result[0]['partners']

	if not user:
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	user = user[-1]

	# data = withdraws_history.get(partner_hash, {})
	# data[transaction_id] = {
	# 	'status': '‚ö™Ô∏è –í—ã–≤–æ–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
	# 	'type': 'üí≥ –ö–∞—Ä—Ç–∞',
	# 	'sum': data['withdraw_sum'],
	# 	'date': datetime.now()
	# }
	# withdraws_history[partner_hash] = data

	if not withdraws_history.get(user['partner_hash'], False):
		messages = ['ü§ñ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤: 0']
	else:
		withdraws = withdraws_history.get(user['partner_hash'])
		messages = [f'ü§ñ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤: {len(withdraws)}']

		withdraws = dict(reversed(withdraws.items()))

		for _, data in withdraws.items():
			messages.append(
				f'{data["status"]}\n‚îú {data["date"].strftime("%H:%M %d-%m-%Y")}: {data["sum"]}: {data["type"]}'
			)

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup('profile'),
	)


@default_router.callback_query(F.data == 'statistics_online', only_confirmed)
async def statistics_online_callback(call: CallbackQuery):
	# ‚ú®üìäüí∞Ô∏èüéÆÔ∏è
	messages = [
		'‚ú® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n',
		'–°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –º–Ω–≥–æ–≤–µ–Ω–Ω–æ! –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ @sinwin_alerts_bot, –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:',
		'üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
		'üí∞Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö.',
		'üéÆÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
		'\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —Ä–∞–Ω–µ–µ, –≤ –±–æ—Ç–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.',
	]

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_online_statistics_markup(),
	)


def get_percent_by_status(status: str) -> float:
	"""
	Gets the percent by status.

	:param		status:	 The status
	:type		status:	 str

	:returns:	The percent by status.
	:rtype:		float
	"""
	status = status.lower()

	match status:
		case '–Ω–æ–≤–∏—á–æ–∫':
			return 35
		case '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç':
			return 40
		case '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª':
			return 45
		case '–º–∞—Å—Ç–µ—Ä':
			return 50
		case '–ª–µ–≥–µ–Ω–¥–∞':
			return 60
		case _:
			return 35


def get_status_conditions(
	status, last_month_income, alltime_income, last_month_firstdeps
) -> tuple:
	if status == '–Ω–æ–≤–∏—á–æ–∫':
		statuses = {
			'income': True if last_month_income >= 50000.0 else False,
			'total_income': True if alltime_income >= 100000.0 else False,
			'first_deposits': True if last_month_firstdeps >= 100 else False,
		}
	elif status == '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç':
		statuses = {
			'income': True if last_month_income >= 150000.0 else False,
			'total_income': True if alltime_income >= 300000.0 else False,
			'first_deposits': True if last_month_firstdeps >= 200 else False,
		}
	elif status == '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª':
		statuses = {
			'income': True if last_month_income >= 300000.0 else False,
			'total_income': True if alltime_income >= 600000.0 else False,
			'first_deposits': True if last_month_firstdeps >= 400 else False,
		}
	elif status == '–º–∞—Å—Ç–µ—Ä':
		statuses = {
			'income': True if last_month_income >= 500000.0 else False,
			'total_income': True if alltime_income >= 1000000.0 else False,
			'first_deposits': True if last_month_firstdeps >= 600 else False,
		}

	statuses_items = {}

	for status_name, status_type in statuses.items():
		statuses_items[status_name] = '‚úÖ' if status_type else '‚ùå'

	return statuses_items, not any(val is False for val in statuses.values())


def get_next_level(status):
	if status == '–Ω–æ–≤–∏—á–æ–∫':
		return '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'

	elif status == '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç':
		return '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'

	elif status == '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª':
		return '–º–∞—Å—Ç–µ—Ä'

	elif status == '–º–∞—Å—Ç–µ—Ä':
		return '–ª–µ–≥–µ–Ω–¥–∞'


@default_router.callback_query(F.data == 'status_levels', only_confirmed)
async def status_levels_callback(call: CallbackQuery):
	if call.from_user.id in config.secrets.ADMINS_IDS:
		await call.answer('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª–æ–≤–∏–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª–∏')
		return

	result, code = await APIRequest.get('/base/stats')

	stats = result['data']

	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners']

	if partner:
		partner = partner[-1]
	else:
		await call.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
		return

	today_firstdeps = len(
		[
			dep['amount']
			for dep in stats['today']['firstdep']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	yesterday_firstdeps = len(
		[
			dep['amount']
			for dep in stats['yesterday']['firstdep']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	last_week_firstdeps = len(
		[
			dep['amount']
			for dep in stats['last_week']['firstdep']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	last_month_firstdeps = len(
		[
			dep['amount']
			for dep in stats['last_month']['firstdep']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)

	today_income = sum(
		[
			dep['x']
			for dep in stats['today']['income']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	yesterday_income = sum(
		[
			dep['x']
			for dep in stats['yesterday']['income']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	last_week_income = sum(
		[
			dep['x']
			for dep in stats['last_week']['income']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	last_month_income = sum(
		[
			dep['x']
			for dep in stats['last_month']['income']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	other_dates_income = [info for name, info in stats.items() if name == 'income']
	others_income = sum(
		[
			dep['x']
			for dep in other_dates_income
			if dep['partner_hash'] == partner['partner_hash']
		]
	)

	alltime_firstdeps = (
		today_firstdeps
		+ yesterday_firstdeps
		+ last_week_firstdeps
		+ last_month_firstdeps
	)
	alltime_income = (
		today_income
		+ yesterday_income
		+ last_week_income
		+ last_month_income
		+ others_income
	)

	last_month_income = (
		today_income + yesterday_income + last_week_income + last_month_income
	)

	statuses1, _ = get_status_conditions(
		'–Ω–æ–≤–∏—á–æ–∫', last_month_income, alltime_income, alltime_firstdeps
	)

	statuses2, _ = get_status_conditions(
		'—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', last_month_income, alltime_income, alltime_firstdeps
	)

	statuses3, _ = get_status_conditions(
		'–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', last_month_income, alltime_income, alltime_firstdeps
	)

	statuses4, _ = get_status_conditions(
		'–º–∞—Å—Ç–µ—Ä', last_month_income, alltime_income, alltime_firstdeps
	)

	messages = [
		'1. –ù–æ–≤–∏—á–æ–∫: 35 %\n–£—Å–ª–æ–≤–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:',
		f'{statuses1["income"]} –î–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 50 000 —Ä—É–±–ª–µ–π',
		f'{statuses1["total_income"]} –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: –Ω–µ –º–µ–Ω–µ–µ 100 000 —Ä—É–±–ª–µ–π',
		f'{statuses1["first_deposits"]} –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 100\n',
		'2. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 40 %',
		f'{statuses2["income"]} –î–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 150 000 —Ä—É–±–ª–µ–π',
		f'{statuses2["total_income"]} –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: –Ω–µ –º–µ–Ω–µ–µ 300 000 —Ä—É–±–ª–µ–π',
		f'{statuses2["first_deposits"]} –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 200\n',
		'3. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª 45 %',
		f'{statuses3["income"]} –î–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 300 000 —Ä—É–±–ª–µ–π',
		f'{statuses3["total_income"]} –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: –Ω–µ –º–µ–Ω–µ–µ 600 000 —Ä—É–±–ª–µ–π',
		f'{statuses3["first_deposits"]} –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 400\n',
		'4. –ú–∞—Å—Ç–µ—Ä 50%',
		f'{statuses4["income"]} –î–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 500 000 —Ä—É–±–ª–µ–π',
		f'{statuses4["total_income"]} –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: –Ω–µ –º–µ–Ω–µ–µ 1 000 000 —Ä—É–±–ª–µ–π',
		f'{statuses4["first_deposits"]} –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 600\n',
		'5. –õ–µ–≥–µ–Ω–¥–∞ –°—É–± –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ\n',
		'–°—É–± –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ 1 Win —á–µ—Ä–µ–∑ –Ω–∞—à—É —Å—Å—ã–ª–∫—É. –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é –º—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç 50% –¥–æ 60% –ø—Ä–∏–±—ã–ª–∏ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É. –ò–Ω–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å "–õ–µ–≥–µ–Ω–¥–∞" –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç—É—Å–∞ "–ú–∞—Å—Ç–µ—Ä".\n',
		'<code>–£—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è</code>',
	]

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup('status'),
	)


@default_router.callback_query(F.data == 'status', only_confirmed)
async def status_callback(call: CallbackQuery):
	# ‚ùå‚úÖüèÜÔ∏èüìäüéØüíºüí∞Ô∏è
	result, code = await APIRequest.get('/base/stats')

	stats = result['data']

	if call.from_user.id in config.secrets.ADMINS_IDS:
		await call.answer(
			'–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª–æ–≤–∏–π –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.'
		)
		return
	else:
		partners = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': call.from_user.id}}
		)
		partner = partners[0]['partners']

		if partner:
			partner = partner[-1]
		else:
			await call.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
			return

		opts = {'referal_parent': partner['partner_hash']}

		data = await collect_stats(opts)

		api_count = result['api_count'].get(partner['partner_hash'], 0)

		today_firstdeps = len(
			[
				dep['amount']
				for dep in stats['today']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		yesterday_firstdeps = len(
			[
				dep['amount']
				for dep in stats['yesterday']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_week_firstdeps = len(
			[
				dep['amount']
				for dep in stats['last_week']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_month_firstdeps = len(
			[
				dep['amount']
				for dep in stats['last_month']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)

		today_deps = sum(
			[
				dep['amount']
				for dep in stats['today']['dep']
				if dep['partner_hash'] == partner['partner_hash']
			]) + sum([
				dep['amount']
				for dep in stats['today']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			])
	
		yesterday_deps = sum(
			[
				dep['amount']
				for dep in stats['yesterday']['dep']
				if dep['partner_hash'] == partner['partner_hash']
			]) + sum([
				dep['amount']
				for dep in stats['yesterday']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			])

		last_week_deps = sum(
			[
				dep['amount']
				for dep in stats['last_week']['dep']
				if dep['partner_hash'] == partner['partner_hash']
			]) + sum([
				dep['amount']
				for dep in stats['last_week']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			])

		last_month_deps = sum(
			[
				dep['amount']
				for dep in stats['last_month']['dep']
				if dep['partner_hash'] == partner['partner_hash']
			]) + sum([
				dep['amount']
				for dep in stats['last_month']['firstdep']
				if dep['partner_hash'] == partner['partner_hash']
			])

		today_income = sum(
			[
				dep['x']
				for dep in stats['today']['income']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		yesterday_income = sum(
			[
				dep['x']
				for dep in stats['yesterday']['income']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_week_income = sum(
			[
				dep['x']
				for dep in stats['last_week']['income']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		last_month_income = sum(
			[
				dep['x']
				for dep in stats['last_month']['income']
				if dep['partner_hash'] == partner['partner_hash']
			]
		)
		other_dates_income = [info for name, info in stats.items() if name == 'income']
		others_income = sum(
			[
				dep['x']
				for dep in other_dates_income
				if dep['partner_hash'] == partner['partner_hash']
			]
		)

		alltime_deps = today_deps + yesterday_deps + last_week_deps + last_month_deps
		alltime_firstdeps = (
			today_firstdeps
			+ yesterday_firstdeps
			+ last_week_firstdeps
			+ last_month_firstdeps
		)
		alltime_income = (
			today_income
			+ yesterday_income
			+ last_week_income
			+ last_month_income
			+ others_income
		)

		signals_gens = sum(
			[info[partner['partner_hash']] for _, info in result['signals'].items()]
		)

		last_month_income = today_income + yesterday_income + last_week_income + last_month_income

		last_month_income_str = '{:,}'.format(last_month_income).replace(',', ' ')
		alltime_income_str = '{:,}'.format(alltime_income).replace(',', ' ')

		statuses, may_up = get_status_conditions(
			partner['status'], last_month_income, alltime_income, alltime_firstdeps
		)

		statuses_conditions = {
			'–Ω–æ–≤–∏—á–æ–∫': {
				'last_month_income': convert_to_human(50000),
				'alltime_income': convert_to_human(100000),
				'alltime_firstdeps': convert_to_human(100),
			},
			'—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç': {
				'last_month_income': convert_to_human(150000),
				'alltime_income': convert_to_human(300000),
				'alltime_firstdeps': convert_to_human(200),
			},
			'–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª': {
				'last_month_income': convert_to_human(300000),
				'alltime_income': convert_to_human(600000),
				'alltime_firstdeps': convert_to_human(400),
			},
			'–º–∞—Å—Ç–µ—Ä': {
				'last_month_income': convert_to_human(500000),
				'alltime_income': convert_to_human(1000000),
				'alltime_firstdeps': convert_to_human(600),
			},
		}

		messages = [
			f'üèÜÔ∏è –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {partner["status"]}',
			f'üéØ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: {get_percent_by_status(partner["status"])}%\n',
			f'üìä –í–∞—à –¥–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {last_month_income_str} RUB',
			f'üíº –û–±—â–∏–π –¥–æ—Ö–æ–¥: {alltime_income_str} RUB',
			f'üí∞Ô∏è –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {last_month_firstdeps}\n',
			'–£—Å–ª–æ–≤–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:',
			f'{statuses["income"]} –î–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ {statuses_conditions[partner["status"]]["last_month_income"]} —Ä—É–±–ª–µ–π',
			f'{statuses["total_income"]} –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: –Ω–µ –º–µ–Ω–µ–µ {statuses_conditions[partner["status"]]["alltime_income"]} —Ä—É–±–ª–µ–π',
			f'{statuses["first_deposits"]} –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ {statuses_conditions[partner["status"]]["alltime_firstdeps"]}\n',
			'–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ß–µ–º –¥–æ–ª—å—à–µ –∏ –ª—É—á—à–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ! –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞, –µ—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.',
			'\n<code>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è.</code>\n',
			'–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
		]

		if partner['status'] == '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç' and partner['is_referal'] and may_up:
			cpartners = await APIRequest.post(
				'/partner/find', {'opts': {'partner_hash': partner['referrer_hash']}}
			)
			cpartner = cpartners[0]['partners'][-1]

			cpartner['ref_income'] += 15000.0
			cpartner['balance'] += 15000.0

			await APIRequest.post('/partner/update', {**cpartner})

			await bot.send_message(
				chat_id=cpartner['tg_id'],
				text=f'–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª #{call.from_user.id} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç–∞—Ç—É—Å ‚Äú–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª 45%‚Äù\n–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å 15 000 —Ä—É–±–ª–µ–π',
			)

			for admin in config.secrets.ADMINS_IDS:
				await bot.send_message(
					chat_id=admin,
					text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username if call.from_user.username is not None else call.from_user.id} –ø–µ—Ä–µ—à–µ–ª —Å–æ —Å—Ç–∞—Ç—É—Å–∞ ‚Äú–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 40 %‚Äù –Ω–∞ —Å—Ç–∞—Ç—É—Å ‚Äú–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª 45 %‚Äù\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cpartner["username"] if cpartner["username"] else cpartner["tg_id"]} –ø–æ–ª—É—á–∏–ª 15 00 —Ä—É–±–ª–µ–π',
				)

		if may_up and partner['status'] == '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª':
			await call.message.answer(
				"""
‚úÖ –í—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç–µ —É—Å–ª–æ–≤–∏—è–º –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å!

–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à –ø–µ—Ä–µ—Ö–æ–¥ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç–∞—Ç—É—Å ‚Äú–õ–µ–≥–µ–Ω–¥–∞‚Äù
–ï—Å–ª–∏ –∑–∞ 24 —á–∞—Å–∞ —Å—Ç–∞—Ç—É—Å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É""",
				reply_markup=inline.create_status_up_master_markup(),
			)
			for admin in config.secrets.ADMINS_IDS:
				try:
					await bot.send_message(
						chat_id=admin,
						text=f"""
Tg id: {call.from_user.id}
–ù–∏–∫: {call.from_user.username}
–•—ç—à: {partner['partner_hash']}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–∞ ‚Äú–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª 45%‚Äù –Ω–∞ —Å—Ç–∞—Ç—É—Å ‚Äú–ú–∞—Å—Ç–µ—Ä 50%‚Äù

<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ë–û–¢–ê–ú</b>
<code>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º (–º–æ–Ω–æ —à–∏—Ä—Ñ—Ç)</code>

üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner['balance']} RUB

–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_deps}
–î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_income}
–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_firstdeps}
API –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {api_count}
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_gens}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data['users_notreg_count']}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {data['users_nottopup_count']}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–≥—Ä—ã: {data['users_gamed_count']}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data['users_today']}
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞: {data['users_yesterday']}
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {data['users_lastweek']}
‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {data['users_month']}

–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_deps}
‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_deps}
‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_deps}
‚îî –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {last_month_deps}

–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_firstdeps}
‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {yesterday_firstdeps}
‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_firstdeps}
‚îî –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {last_month_firstdeps}

–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_income}
‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_income}
‚îú –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_income}
‚îî –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {last_month_income}
""",
						reply_markup=inline.create_confirm_status_change(
							call.from_user.id
						),
						parse_mode=ParseMode.HTML,
					)
				except Exception:
					await bot.send_message(
						chat_id=admin,
						text=f"""
Tg id: {call.from_user.id}
–ù–∏–∫: {call.from_user.username}
–•—ç—à: {partner['partner_hash']}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–∞ ‚Äú–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª 45%‚Äù –Ω–∞ —Å—Ç–∞—Ç—É—Å ‚Äú–ú–∞—Å—Ç–µ—Ä 50%‚Äù

<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ë–û–¢–ê–ú</b>
<code>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º (–º–æ–Ω–æ —à–∏—Ä—Ñ—Ç)</code>

üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner['balance']} RUB

–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_deps}
–î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_income}
–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_firstdeps}
API –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {api_count}
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_gens}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data['users_notreg_count']}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {data['users_nottopup_count']}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–≥—Ä—ã: {data['users_gamed_count']}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data['users_today']}
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞: {data['users_yesterday']}
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {data['users_lastweek']}
‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {data['users_month']}

–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_deps}
‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_deps}
‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_deps}
‚îî –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {last_month_deps}

–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_firstdeps}
‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {yesterday_firstdeps}
‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_firstdeps}
‚îî –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {last_month_firstdeps}

–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_income}
‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_income}
‚îú –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_income}
‚îî –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {last_month_income}
""",
						reply_markup=inline.create_confirm_status_change(
							call.from_user.id, withwrite=False
						),
						parse_mode=ParseMode.HTML,
					)
			return
		elif may_up and (
			partner['status'] != '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'
			and partner['status'] != '–º–∞—Å—Ç–µ—Ä'
			and partner['status'] != '–ª–µ–≥–µ–Ω–¥–∞'
		):
			await call.message.edit_text(
				f"""
‚úÖ –í—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç–µ —É—Å–ª–æ–≤–∏—è–º –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å!

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å "{get_next_level(partner['status'])}"!

–ü—Ä–æ—Ü–µ–Ω—Ç –í–∞—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞ —Ç–µ–ø–µ—Ä—å: {get_percent_by_status(get_next_level(partner['status']))}%
				""",
				reply_markup=inline.create_status_up_markup(),
			)

			partner['status'] = get_next_level(partner['status'])
			partner['percent'] = get_percent_by_status(partner['status'])

			await APIRequest.post('/partner/update', {**partner})
			return

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_status_markup(),
	)


async def send_message_about_status_change(status: str, userid: int):
	scheduler.remove_job(f'{status}status_{userid}')

	if status == 'confirm':
		await bot.send_message(
			chat_id=userid,
			text="""
‚úÖ –í—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç–µ —É—Å–ª–æ–≤–∏—è–º –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å!

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å "–ú–∞—Å—Ç–µ—Ä"! –ü—Ä–æ—Ü–µ–Ω—Ç –í–∞—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞ —Ç–µ–ø–µ—Ä—å: 50 %	
""",
			reply_markup=inline.create_status_up_markup(),
		)

		partner = await APIRequest.post('/partner/find', {'opts': {'tg_id': userid}})
		partner = partner[0]['partners'][-1]

		partner['status'] = '–º–∞—Å—Ç–µ—Ä'
		partner['percent'] = 50

		await APIRequest.post('/partner/update', {**partner})
	else:
		await bot.send_message(
			chat_id=userid,
			text="""
‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç–∞—Ç—É—Å ‚Äú–ú–∞—Å—Ç–µ—Ä‚Äù –æ—Ç–∫–ª–æ–Ω–µ–Ω.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
""",
			reply_markup=inline.create_status_up_rejected_markup(),
		)


@default_router.callback_query(F.data.startswith('confirm_status_change_'))
async def confirm_status_change_user(call: CallbackQuery, scheduler=scheduler):
	userid = int(call.data.replace('confirm_status_change_', ''))
	partners = await APIRequest.post('/partner/find', {'opts': {'tg_id': userid}})
	partner = partners[0]['partners']

	if partner:
		partner = partner[-1]
	else:
		await call.answer('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞')
		return

	try:
		scheduler.remove_job(f'confirmstatus_{userid}')
	except Exception:
		pass
	try:
		scheduler.remove_job(f'rejectstatus_{userid}')
	except Exception:
		pass

	scheduler.add_job(
		send_message_about_status_change,
		trigger=IntervalTrigger(seconds=180),
		args=('confirm', userid),
		id=f'confirmstatus_{userid}',
		replace_existing=True,
	)

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_message(
			chat_id=admin,
			text=f"""
–ù–∏–∫: {partner['username']}
–•—ç—à: {partner['partner_hash']}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}

‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª —Å–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞ ‚Äú–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª 45%‚Äù –Ω–∞ —Å—Ç–∞—Ç—É—Å ‚Äú–ú–∞—Å—Ç–µ—Ä 50%‚Äù		
""",
			reply_markup=inline.change_status_moving(userid),
		)


@default_router.callback_query(F.data.startswith('reject_status_change_'))
async def reject_status_change_user(call: CallbackQuery, scheduler=scheduler):
	userid = int(call.data.replace('reject_status_change_', ''))
	partners = await APIRequest.post('/partner/find', {'opts': {'tg_id': userid}})
	partner = partners[0]['partners']

	if partner:
		partner = partner[-1]
	else:
		await call.answer('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞')
		return

	try:
		scheduler.remove_job(f'confirmstatus_{userid}')
	except Exception:
		pass
	try:
		scheduler.remove_job(f'rejectstatus_{userid}')
	except Exception:
		pass

	scheduler.add_job(
		send_message_about_status_change,
		trigger=IntervalTrigger(seconds=180),
		args=('reject', userid),
		id=f'rejectstatus_{userid}',
		replace_existing=True,
	)

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_message(
			chat_id=admin,
			text=f"""
–ù–∏–∫: {partner['username']}
–•—ç—à: {partner['hash']}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}

‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å  –Ω–µ –ø–µ—Ä–µ—à–µ–ª —Å–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞ ‚Äú–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª 45%‚Äù –Ω–∞ —Å—Ç–∞—Ç—É—Å ‚Äú–ú–∞—Å—Ç–µ—Ä 50%‚Äù	
""",
			reply_markup=inline.change_status_moving(userid),
		)


@default_router.callback_query(F.data.startswith('change_status_moving_'))
async def change_status_moving_callback(call: CallbackQuery):
	userid = int(call.data.replace('change_status_moving_', ''))

	result, code = await APIRequest.get('/base/stats')

	stats = result['data']

	partners = await APIRequest.post('/partner/find', {'opts': {'tg_id': userid}})
	partner = partners[0]['partners']

	opts = {'referal_parent': partner['partner_hash']}

	data = await collect_stats(opts)

	api_count = len(
		[
			apinum
			for partnerhash, apinum in result['api_count'].items()
			if partnerhash == partner['partner_hash']
		]
	)

	today_firstdeps = len(
		[
			dep['amount']
			for dep in stats['today']['firstdep']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	yesterday_firstdeps = len(
		[
			dep['amount']
			for dep in stats['yesterday']['firstdep']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	last_week_firstdeps = len(
		[
			dep['amount']
			for dep in stats['last_week']['firstdep']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	last_month_firstdeps = len(
		[
			dep['amount']
			for dep in stats['last_month']['firstdep']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)

	today_deps = sum([
			dep['amount']
			for dep in stats['today']['firstdep']
			if dep['partner_hash'] == partner['partner_hash']
		]) + sum(
		[
			dep['amount']
			for dep in stats['today']['dep']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	yesterday_deps = sum([
			dep['amount']
			for dep in stats['yesterday']['firstdep']
			if dep['partner_hash'] == partner['partner_hash']
		]) + sum(
		[
			dep['amount']
			for dep in stats['yesterday']['dep']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	last_week_deps = sum([
			dep['amount']
			for dep in stats['last_week']['firstdep']
			if dep['partner_hash'] == partner['partner_hash']
		]) + sum(
		[
			dep['amount']
			for dep in stats['last_week']['dep']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	last_month_deps = sum([
			dep['amount']
			for dep in stats['last_month']['firstdep']
			if dep['partner_hash'] == partner['partner_hash']
		]) + sum(
		[
			dep['amount']
			for dep in stats['last_month']['dep']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)

	today_income = sum(
		[
			dep['x']
			for dep in stats['today']['income']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	yesterday_income = sum(
		[
			dep['x']
			for dep in stats['yesterday']['income']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	last_week_income = sum(
		[
			dep['x']
			for dep in stats['last_week']['income']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	last_month_income = sum(
		[
			dep['x']
			for dep in stats['last_month']['income']
			if dep['partner_hash'] == partner['partner_hash']
		]
	)
	other_dates_income = [info for name, info in stats.items() if name == 'income']
	others_income = sum(
		[
			dep['x']
			for dep in other_dates_income
			if dep['partner_hash'] == partner['partner_hash']
		]
	)

	alltime_deps = today_deps + yesterday_deps + last_week_deps + last_month_deps
	alltime_firstdeps = (
		today_firstdeps
		+ yesterday_firstdeps
		+ last_week_firstdeps
		+ last_month_firstdeps
	)
	alltime_income = (
		today_income
		+ yesterday_income
		+ last_week_income
		+ last_month_income
		+ others_income
	)

	signals_gens = sum(
		[info[partner['partner_hash']] for _, info in result['signals'].items()]
	)

	statuses, may_up = get_status_conditions(
		partner['status'], last_month_income, alltime_income, last_month_firstdeps
	)

	if partner:
		partner = partner[-1]
	else:
		await call.answer('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞')
		return

	for admin in config.secrets.ADMINS_IDS:
		try:
			await bot.send_message(
				chat_id=admin,
				text=f"""
Tg id: {userid}
–ù–∏–∫: {partner['username']}
–•—ç—à: {partner['partner_hash']}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–∞ ‚Äú–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª 45%‚Äù –Ω–∞ —Å—Ç–∞—Ç—É—Å ‚Äú–ú–∞—Å—Ç–µ—Ä 50%‚Äù

<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ë–û–¢–ê–ú</b>
<code>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º (–º–æ–Ω–æ —à–∏—Ä—Ñ—Ç)</code>

üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner['balance']} RUB

–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_deps}
–î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_income}
–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_firstdeps}
API –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {api_count}
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_gens}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data['users_notreg_count']}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {data['users_nottopup_count']}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–≥—Ä—ã: {data['users_gamed_count']}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data['users_today']}
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞: {data['users_yesterday']}
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {data['users_lastweek']}
‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {data['users_month']}

–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_deps}
‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_deps}
‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_deps}
‚îî –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {last_month_deps}

–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_firstdeps}
‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {yesterday_firstdeps}
‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_firstdeps}
‚îî –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {last_month_firstdeps}

–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_income}
‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_income}
‚îú –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_income}
‚îî –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {last_month_income}
""",
				reply_markup=inline.create_confirm_status_change(call.from_user.id),
				parse_mode=ParseMode.HTML,
			)
		except Exception:
			await bot.send_message(
				chat_id=admin,
				text=f"""
Tg id: {userid}
–ù–∏–∫: {partner['username']}
–•—ç—à: {partner['partner_hash']}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–∞ ‚Äú–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª 45%‚Äù –Ω–∞ —Å—Ç–∞—Ç—É—Å ‚Äú–ú–∞—Å—Ç–µ—Ä 50%‚Äù

<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ë–û–¢–ê–ú</b>
<code>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º (–º–æ–Ω–æ —à–∏—Ä—Ñ—Ç)</code>

üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner['balance']} RUB

–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_deps}
–î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_income}
–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_firstdeps}
API –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {api_count}
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_gens}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data['users_notreg_count']}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {data['users_nottopup_count']}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–≥—Ä—ã: {data['users_gamed_count']}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data['users_today']}
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞: {data['users_yesterday']}
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {data['users_lastweek']}
‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {data['users_month']}

–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_deps}
‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_deps}
‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_deps}
‚îî –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {last_month_deps}

–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_firstdeps}
‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {yesterday_firstdeps}
‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_firstdeps}
‚îî –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {last_month_firstdeps}

–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_income}
‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_income}
‚îú –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_income}
‚îî –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {last_month_income}
""",
				reply_markup=inline.create_confirm_status_change(
					call.from_user.id, withwrite=False
				),
				parse_mode=ParseMode.HTML,
			)


@default_router.callback_query(F.data == 'profile', only_confirmed)
async def profile_callback(call: CallbackQuery):
	if call.from_user.id in config.secrets.ADMINS_IDS:
		balance, status_code = await APIRequest.get('/base/admin_balance')
		messages = [
			f'<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\nüÜî –í–∞—à ID: {call.from_user.id}',
			'üõ°Ô∏è –í–∞—à —Ö–µ—à: admin\n',
			f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {balance["balance"]} RUB',
			'‚öñÔ∏è –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω',
			'üèóÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 0',
		]

		await call.message.edit_text(
			'\n'.join(messages),
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_profile_markup(),
		)
		return

	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]

	if not partner['approved']:
		print(partner)
		users[call.from_user.id] = users.get(call.from_user.id, {})
		users[call.from_user.id]['final'] = False
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	partner_hash = partner.get('partner_hash', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
	status = partner.get('status', '–Ω–æ–≤–∏—á–æ–∫')

	reg_date = datetime.fromisoformat(partner.get('register_date'))
	cur_date = datetime.now()
	difference = cur_date - reg_date
	days_difference = max(difference.days, 1)

	cpartners = await APIRequest.post(
		'/partner/find', {'opts': {'referrer_hash': partner['referrer_hash'], "is_referal": True}}
	)
	cpartners = cpartners[0]['partners']

	messages = [
		f'<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\nüÜî –í–∞—à ID: {call.from_user.id}',
		f'üõ°Ô∏è –í–∞—à —Ö–µ—à: {partner_hash}\n',
		f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner.get("balance", 0.0)} RUB',
		f'‚öñÔ∏è –°—Ç–∞—Ç—É—Å: {status}',
		f'üéØ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: {get_percent_by_status(partner["status"])}%\n',
		f'üèóÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(cpartners)}',
		f'‚òØÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –Ω–∞–º–∏: {days_difference}',
		# f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ @IziMin_test_Bot: https://t.me/IziMin_test_Bot?start='
	]

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_profile_markup(),
	)


@default_router.callback_query(F.data == 'withdraw', only_confirmed)
async def withdraw_callback(call: CallbackQuery):
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners']

	if partner:
		partner = partner[-1]
	else:
		await call.answer('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞')
		return

	messages = [
		f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n',
		'‚ùóÔ∏è –í–´–í–û–î –°–†–ï–î–°–¢–í –î–û–°–¢–£–ü–ï–ù –û–î–ò–ù –†–ê–ó –í –ù–ï–î–ï–õ–Æ –ö–ê–ñ–î–£–Æ –°–†–ï–î–£ –ü–û –ú–û–°–ö–û–í–°–ö–û–ú–£ –í–†–ï–ú–ï–ù–ò. –ö –í–´–í–û–î–£ –î–û–°–¢–£–ü–ù–ê –í–°–Ø –°–£–ú–ú–ê –ö–û–¢–û–†–ê–Ø –ù–ê–•–û–î–ò–¢–°–Ø –ù–ê –ë–ê–õ–ê–ù–°–ï.‚ùóÔ∏è\n',
		'–í —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –ø—Ä–∏ –±–æ–ª—å—â–æ–º –¥–æ—Ö–æ–¥–µ —Å–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞ –Ω–∞ —Å—Ä–µ–¥—É –≤—ã–≤–µ—Å—Ç–∏ –≤—Å—é —Å—É–º–º—É –ø–æ–ª—É—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é. –û–¥–Ω–∞–∫–æ –≤ —Ç–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —á–∞—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤, –æ—Å—Ç–∞–≤–∏–≤ –Ω–µ–±–æ–ª—å—à–æ–π –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n',
		'–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n',
		'<b>–õ–ò–ú–ò–¢–´ –ù–ê –í–´–í–û–î –°–†–ï–î–°–¢–í</b>\n',
		'üí≥Ô∏è <b>–ö–∞—Ä—Ç–∞</b>',
		' ‚àü VISA, MasterCard: –æ—Ç 2 000 ‚ÇΩ –¥–æ 50 000 ‚ÇΩ\n',
		'üì± <b>–í—ã–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>',
		' ‚àü VISA, MasterCard, –ú–ò–†: –æ—Ç 5 000 ‚ÇΩ –¥–æ 100 000 ‚ÇΩ\n',
		'‚öôÔ∏è <b>Steam</b>',
		' ‚àü –í—ã–≤–æ–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç Steam: –æ—Ç 2 000 ‚ÇΩ –¥–æ 12 000 ‚ÇΩ\n',
		'üå∏ <b>Piastrix</b>',
		'‚àü –æ—Ç 1 800 ‚ÇΩ –¥–æ 100 000 ‚ÇΩ\n',
		'üëæ <b>FK Wallet</b>',
		'‚àü –æ—Ç 1 800 ‚ÇΩ –¥–æ 100 000 ‚ÇΩ\n',
		'üëë <b>–ö—Ä–∏–ø—Ç–∞</b>',
		'‚àü –ü–ª–∞–≤–∞—é—â–∏–µ –ª–∏–º–∏—Ç—ã, —Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –æ—Ç 1 500 ‚ÇΩ –¥–æ 5 000 000 ‚ÇΩ\n',
	]

	try:
		await call.message.edit_text(
			'\n'.join(messages),
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_withdraw_markup(),
		)
	except Exception:
		await call.message.delete()
		await call.message.answer(
			'\n'.join(messages),
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_withdraw_markup(),
		)


@default_router.callback_query(F.data == 'withdraw_crypto', only_confirmed)
async def withdraw_crypto_callback(call: CallbackQuery, state: FSMContext):
	await state.clear()
	messages = [
		'–ö–∞–∫—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥?\n',
		'<b>–õ–ò–ú–ò–¢–´ –ù–ê –í–´–í–û–î –°–†–ï–î–°–¢–í</b>',
		'Bitcoin - 10 650 ‚ÇΩ - 665 000 ‚ÇΩ',
		'Ethereum - 1 000 ‚ÇΩ - 665 000 ‚ÇΩ',
		'Tron - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ',
		'Tether ERC20 - 1 500 ‚ÇΩ - 5 000 000 ‚ÇΩ',
		'Tether TRC20 - 1 500 ‚ÇΩ - 5 000 000 ‚ÇΩ',
		'Tether BEP20 - 1 500 ‚ÇΩ - 5 000 000 ‚ÇΩ',
		'BNB BEP20 - 1 500 ‚ÇΩ - 655 070 ‚ÇΩ',
		'Litecoin - 1 500 ‚ÇΩ - 665 000 ‚ÇΩ',
		'Monero - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ',
		'Bitcoin Cash - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ',
		'Dash - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ',
		'Doge - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ',
		'Zcash - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ',
		'Ripple - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ',
		'Stellar - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ',
	]

	await call.message.edit_text(
		'\n'.join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_crypto_withdraw_markup(),
	)

	await state.set_state(CryptoWithdrawGroup.withdraw_card)


@default_router.callback_query(
	F.data.startswith('crypto_set_withdraw_'),
	CryptoWithdrawGroup.withdraw_card,
	only_confirmed,
)
async def crypto_set_withdraw_type(call: CallbackQuery, state: FSMContext):
	crypto_type = call.data.replace('crypto_set_withdraw_', '').lower()
	limit = LIMITS.get(crypto_type, (1500.0, 665070.0))

	await state.update_data(withdraw_card=crypto_type, limit=limit)

	users[call.message.chat.id] = {
		'final': True,
		'withdraw_card': True,
	}

	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]

	if not partner['approved']:
		print(partner)
		users[call.from_user.id] = users.get(call.from_user.id, {})
		users[call.from_user.id]['final'] = False
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	message = f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n–í—ã–≤–æ–¥ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É {crypto_type.upper()}\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞: '

	await call.message.edit_text(
		message,
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup('withdraw'),
	)
	await state.set_state(CryptoWithdrawGroup.address)

	# message = f"üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner['balance']} RUB\n–í—ã–≤–æ–¥ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É {crypto_type.upper()}\n–õ–∏–º–∏—Ç –æ–¥–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞: –æ—Ç {limit[0]} ‚ÇΩ –¥–æ {limit[1]} ‚ÇΩ\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏."

	# image = FSInputFile(path=f"{config.SINWIN_DATA}/main/crupto.jpg")

	# await call.message.edit_media(
	# 	InputMediaPhoto(media=image, caption=message, parse_mode=ParseMode.HTML),
	# 	parse_mode=ParseMode.HTML,
	# 	reply_markup=inline.create_back_markup("withdraw"),
	# )

	# await state.set_state(CryptoWithdrawGroup.withdraw_sum)


@default_router.message(F.text, CryptoWithdrawGroup.address, message_only_confirmed)
async def withdraw_crypto_address(message: Message, state: FSMContext):
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': message.from_user.id}}
	)
	partner = partners[0]['partners'][-1]

	if not partner['approved']:
		print(partner)
		users[message.from_user.id] = users.get(message.from_user.id, {})
		users[message.from_user.id]['final'] = False
		await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	data = await state.get_data()
	crypto_type = data.get('withdraw_card').lower()
	limit = LIMITS.get(crypto_type, (1500.0, 665070.0))

	messages = f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n–í—ã–≤–æ–¥ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É {crypto_type.upper()} {message.text}\n–õ–∏–º–∏—Ç –æ–¥–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞: –æ—Ç {limit[0]} ‚ÇΩ –¥–æ {limit[1]} ‚ÇΩ\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.'

	await state.update_data(address=message.text)
	await state.update_data(withdraw_card=f'{crypto_type.upper()} {message.text}')

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/crupto.jpg')

	await message.answer_photo(
		photo=image,
		caption=messages,
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup('withdraw'),
	)

	await state.set_state(CryptoWithdrawGroup.withdraw_sum)


@default_router.message(
	F.text, CryptoWithdrawGroup.withdraw_sum, message_only_confirmed
)
async def withdraw_crypto_message(message: Message, state: FSMContext):
	user = users.get(message.chat.id, {})

	try:
		partners = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': message.from_user.id}}
		)
		partner = partners[0]['partners'][-1]
	except Exception as ex:
		await message.answer(
			f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}',
			reply_markup=inline.create_back_markup('profile'),
		)
		return

	try:
		sum_to_withdraw = int(message.text)
	except Exception:
		await message.answer(
			'–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.',
			reply_markup=inline.create_back_markup('withdraw_crypto'),
		)
		return

	data = await state.get_data()

	if user.get('final', False) and user.get('withdraw_card', False):
		if partner['balance'] < sum_to_withdraw:
			await message.answer(
				f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n\n–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.',
				reply_markup=inline.create_back_markup('withdraw_crypto'),
			)

		elif sum_to_withdraw > data['limit'][1]:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç\n\n–°—É–º–º–∞ {sum_to_withdraw} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º:',
				reply_markup=inline.create_back_markup('withdraw_crypto'),
			)

		elif sum_to_withdraw < data['limit'][0]:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞\n\n–°—É–º–º–∞ {sum_to_withdraw} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º.',
				reply_markup=inline.create_back_markup('withdraw_crypto'),
			)

		else:
			await state.update_data(withdraw_sum=sum_to_withdraw)
			data = await state.get_data()
			await message.answer(
				f'–í—ã–≤–æ–¥ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø—Ä–∏–Ω—è—Ç.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. –°—É–º–º–∞: {data.get("withdraw_sum")} ‚ÇΩ\n\n–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {data.get("withdraw_card")}',
				reply_markup=inline.create_withdraw_continue_markup(withdraw='crypto'),
			)
			await state.set_state(CryptoWithdrawGroup.approved)


@default_router.callback_query(
	F.data == 'user_approve_crypto_withdraw',
	CryptoWithdrawGroup.approved,
	message_only_confirmed,
)
async def user_approve_crypto_withdraw(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	user = users.get(call.message.chat.id, {})
	user['withdraw_card'] = False
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]
	await state.clear()

	partner_hash = partner.get('partner_hash', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')

	result, status = await APIRequest.post(
		'/transaction/create',
		data={
			'partner_hash': partner_hash,
			'username': str(call.from_user.username),
			'amount': data['withdraw_sum'],
			'withdraw_card': data['withdraw_card'],
			'approved': False,
			'preview_id': int(
				f'{datetime.now().strftime("%d%m%H%M%S")}{randint(1000, 9999)}'
			),
		},
	)

	if status != 200:
		await call.answer(f'–æ—à–∏–±–∫–∞: {status}')
		return

	transaction_id = result.get('transaction_id', 0)

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': transaction_id}}
	)
	transac = transactions[0]['transactions'][-1]

	await call.message.edit_text(
		f'–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\nüõ° –í–∞—à —Ö—ç—à: {partner_hash}\nüÜî ID –í—ã–≤–æ–¥–∞: {transac["preview_id"]}\n\n–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞. –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
		reply_markup=inline.create_back_markup('profile'),
	)

	tdata = withdraws_history.get(partner_hash, {})
	tdata[transac['preview_id']] = {
		'status': '‚ö™Ô∏è –í—ã–≤–æ–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
		'type': 'üëë –ö—Ä–∏–ø—Ç–∞',
		'sum': data['withdraw_sum'],
		'date': datetime.now(),
	}
	withdraws_history[partner_hash] = tdata

	transactions_dict[transaction_id] = data

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/crupto.jpg')

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_photo(
			chat_id=admin,
			photo=image,
			caption=f"""Tg id: {call.from_user.id}
–ù–∏–∫: {call.from_user.username}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}
–•—ç—à: {partner_hash}
Id –í—ã–≤–æ–¥–∞: {transac['preview_id']}

–í—ã–≤–æ–¥: üëë –ö—Ä–∏–ø—Ç–∞
–°—É–º–º–∞: <code>{data['withdraw_sum']}</code>‚ÇΩ
–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: <code>{data['withdraw_card']}</code>""",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_admin_transaction_menu(
				transaction_id, admin, 'crypto'
			),
		)


@default_router.callback_query(F.data == 'withdraw_card', only_confirmed)
async def withdraw_card_callback(call: CallbackQuery, state: FSMContext):
	await state.clear()

	users[call.message.chat.id] = {
		'final': True,
		'withdraw_card': True,
	}

	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]

	if not partner['approved']:
		print(partner)
		users[call.from_user.id] = users.get(call.from_user.id, {})
		users[call.from_user.id]['final'] = False
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	message = f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\nüí≥Ô∏è Visa –∏–ª–∏ MasterCard\n–õ–∏–º–∏—Ç –æ–¥–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞: 2 000 ‚ÇΩ - 50 000 ‚ÇΩ\n\n<code>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—ã –±–∞–Ω–∫–æ–≤ –†–§ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π. –ß—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∞—Ç—å –≤—ã–≤–æ–¥—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –°–±–µ—Ä–∞.</code>\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.'

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/card.jpg')

	await call.message.edit_media(
		InputMediaPhoto(media=image, caption=message, parse_mode=ParseMode.HTML),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup('withdraw'),
	)

	await state.set_state(CardWithdrawGroup.withdraw_sum)


@default_router.message(F.text, CardWithdrawGroup.withdraw_sum, message_only_confirmed)
async def withdraw_card_message(message: Message, state: FSMContext):
	user = users.get(message.chat.id, {})

	try:
		partners = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': message.from_user.id}}
		)
		partner = partners[0]['partners'][-1]
	except Exception as ex:
		await message.answer(
			f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}',
			reply_markup=inline.create_back_markup('profile'),
		)
		return

	try:
		sum_to_withdraw = int(message.text)
	except Exception:
		await message.answer(
			'–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.',
			reply_markup=inline.create_back_markup('withdraw_card'),
		)
		await state.clear()
		return

	if user.get('final', False) and user.get('withdraw_card', False):
		if partner['balance'] < sum_to_withdraw:
			await message.answer(
				f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n\n–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.',
				reply_markup=inline.create_back_markup('withdraw_card'),
			)

		elif sum_to_withdraw > 50000.0:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç\n\n–°—É–º–º–∞ {sum_to_withdraw} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º:',
				reply_markup=inline.create_back_markup('withdraw_card'),
			)

		elif sum_to_withdraw < 2000.0:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞\n\n–°—É–º–º–∞ {sum_to_withdraw} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º.',
				reply_markup=inline.create_back_markup('withdraw_card'),
			)

		else:
			await state.update_data(withdraw_sum=sum_to_withdraw)
			await message.answer(
				f'–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {sum_to_withdraw} ‚ÇΩ\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)',
				reply_markup=inline.create_back_markup('withdraw_card'),
			)
			await state.set_state(CardWithdrawGroup.withdraw_card)


@default_router.message(F.text, CardWithdrawGroup.withdraw_card, message_only_confirmed)
async def withdraw_withdraw_card_message(message: Message, state: FSMContext):
	text = message.text
	user = users.get(message.chat.id, {})
	status = is_valid_card(text)

	if status is None:
		# await state.clear()
		user['withdraw_card'] = False
		await message.answer(
			'–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 16 —Ü–∏—Ñ—Ä, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.',
			reply_markup=inline.create_back_markup('withdraw_card'),
		)
	elif not status:
		# await state.clear()
		user['withdraw_card'] = False
		await message.answer(
			'–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n\n–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 16 —Ü–∏—Ñ—Ä, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.',
			reply_markup=inline.create_back_markup('withdraw_card'),
		)
	else:
		await state.update_data(withdraw_card=text)
		data = await state.get_data()
		await message.answer(
			f'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø—Ä–∏–Ω—è—Ç.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. –°—É–º–º–∞: {data.get("withdraw_sum")} ‚ÇΩ\n\n–ö–∞—Ä—Ç–∞: {text}',
			reply_markup=inline.create_withdraw_continue_markup(),
		)
		await state.set_state(CardWithdrawGroup.approved)


@default_router.callback_query(
	F.data == 'user_approve_card_withdraw',
	CardWithdrawGroup.approved,
	message_only_confirmed,
)
async def user_approve_card_withdraw(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	user = users.get(call.message.chat.id, {})
	user['withdraw_card'] = False
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]
	await state.clear()

	partner_hash = partner.get('partner_hash', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')

	result, status = await APIRequest.post(
		'/transaction/create',
		data={
			'partner_hash': partner_hash,
			'username': str(call.from_user.username),
			'amount': data['withdraw_sum'],
			'withdraw_card': data['withdraw_card'],
			'approved': False,
			'preview_id': int(
				f'{datetime.now().strftime("%d%m%H%M%S")}{randint(1000, 9999)}'
			),
		},
	)

	if status != 200:
		await call.answer(f'–æ—à–∏–±–∫–∞: {status}')
		return

	transaction_id = result.get('transaction_id', 0)

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': transaction_id}}
	)
	transac = transactions[0]['transactions'][-1]

	await call.message.edit_text(
		f'–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\nüõ° –í–∞—à —Ö—ç—à: {partner_hash}\nüÜî ID –í—ã–≤–æ–¥–∞: {transac["preview_id"]}\n\n–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞. –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
		reply_markup=inline.create_back_markup('profile'),
	)

	tdata = withdraws_history.get(partner_hash, {})
	tdata[transac['preview_id']] = {
		'status': '‚ö™Ô∏è –í—ã–≤–æ–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
		'type': 'üí≥ –ö–∞—Ä—Ç–∞',
		'sum': data['withdraw_sum'],
		'date': datetime.now(),
	}
	withdraws_history[partner_hash] = tdata

	transactions_dict[transaction_id] = data

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/card.jpg')

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_photo(
			chat_id=admin,
			photo=image,
			caption=f"""Tg id: {call.from_user.id}
–ù–∏–∫: {call.from_user.username}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}
–•—ç—à: {partner_hash}
Id –í—ã–≤–æ–¥–∞: {transac['preview_id']}

–í—ã–≤–æ–¥: üí≥ –ö–∞—Ä—Ç–∞
–°—É–º–º–∞: <code>{data['withdraw_sum']}</code>‚ÇΩ
–ö–∞—Ä—Ç–∞: <code>{data['withdraw_card']}</code>""",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_admin_transaction_menu(
				transaction_id, admin, 'card'
			),
		)


async def send_message_about_transaction_to_user(
	sum_to_withdraw,
	partner_hash: str,
	transaction_id: int,
	scheduler,
	transactype: str = 'üí≥ –ö–∞—Ä—Ç–∞',
):
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'partner_hash': partner_hash}}
	)
	partner = partners[0]['partners'][-1]

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': transaction_id}}
	)
	transac = transactions[0]['transactions'][-1]

	scheduler.remove_job(f'sendtransac_{transaction_id}')

	if partner['balance'] - int(sum_to_withdraw.replace(' ', '')) < 0.0:
		await bot.send_message(
			chat_id=partner['tg_id'],
			text=f'‚ùå –í–∞—à –≤—ã–≤–æ–¥ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π –ø–æ –ø—Ä–∏—á–∏–Ω–µ: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n\nüõ° –í–∞—à —Ö—ç—à: {partner_hash}\nüÜî ID –í—ã–≤–æ–¥–∞: {transac["preview_id"]}\n\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {sum_to_withdraw}‚ÇΩ',
			reply_markup=inline.create_back_markup('profile'),
		)
		return

	partner['balance'] -= int(sum_to_withdraw.replace(' ', ''))

	transactions_schedulded[transaction_id] = False

	tdata = withdraws_history.get(partner_hash, {})
	tdata[transac['preview_id']] = {
		'status': 'üü¢ –í—ã–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω',
		'type': transactype,
		'sum': transac['amount'],
		'date': datetime.now(),
	}
	withdraws_history[partner_hash] = tdata

	await APIRequest.post('/partner/update', {**partner})

	await bot.send_message(
		chat_id=partner['tg_id'],
		text=f'‚úÖ–í–∞—à –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –≤—ã–ø–ª–∞—Ç–µ. –°—Ä–µ–¥—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\nüõ° –í–∞—à —Ö—ç—à: {partner_hash}\nüÜî ID –í—ã–≤–æ–¥–∞: {transac["preview_id"]}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
		reply_markup=inline.create_back_markup('profile'),
	)


async def send_message_about_ftransaction_to_user(
	reason,
	sum_to_withdraw,
	partner_hash: str,
	transaction_id: int,
	scheduler,
	transactype: str = 'üí≥ –ö–∞—Ä—Ç–∞',
):
	# üü¢üü°‚ö™Ô∏è
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'partner_hash': partner_hash}}
	)
	partner = partners[0]['partners'][-1]

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': transaction_id}}
	)
	transac = transactions[0]['transactions'][-1]

	scheduler.remove_job(f'fsendtransac_{transaction_id}')

	transactions_schedulded[transaction_id] = False

	tdata = withdraws_history.get(partner_hash, {})
	tdata[transac['preview_id']] = {
		'status': 'üü° –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω',
		'type': transactype,
		'sum': transac['amount'],
		'date': datetime.now(),
	}
	withdraws_history[partner_hash] = tdata

	reason = f'–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {reason}\n' if reason is not None else reason

	await bot.send_message(
		chat_id=partner['tg_id'],
		text=f"""
‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.

üõ° –í–∞—à —Ö—ç—à: {partner_hash}
üÜî ID –í—ã–≤–æ–¥–∞: {transac['preview_id']}
{reason if reason is not None else ''}
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.	
""",
		reply_markup=inline.create_support_transac_markup(),
	)


def get_emoji_by_method(method: str) -> str:
	if method == 'card':
		return 'üí≥ –ö–∞—Ä—Ç–∞'
	elif method == 'steam':
		return '‚öôÔ∏è Steam'
	elif method == 'crypto':
		return 'üëë –ö—Ä–∏–ø—Ç–∞'
	elif method == 'phone':
		return 'üì± –í—ã–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É'
	elif method == 'piastrix':
		return 'üå∏ Piastrix'
	elif method == 'fkwallet':
		return 'üëæ FK Wallet'


@default_router.callback_query(F.data.startswith('badmin_approve_transaction'))
async def admin_approve_transaction(call: CallbackQuery, scheduler=scheduler):
	data = call.data.split('.')
	method = data[-1]
	data = data[0]
	transaction_id = int(data.replace('badmin_approve_transaction', '').split('_')[0])
	await call.answer()

	names = {
		'card': '–ö–∞—Ä—Ç–∞',
		'steam': 'Steam –ª–æ–≥–∏–Ω',
		'crypto': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
		'piastrix': 'Piastrix',
		'fkwallet': 'FK Wallet',
		'phone': '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
	}

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': transaction_id}}
	)
	transaction = transactions[0]['transactions'][-1]

	if transactions_schedulded.get(transaction['id'], False):
		await call.answer(
			f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction["preview_id"]} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
		)
		return

	transaction['approved'] = True

	await APIRequest.post('/transaction/update', {**transaction})

	data = transactions_dict.get(transaction_id, {})
	sum_to_withdraw = f'{data["withdraw_sum"]:,}'.replace(',', ' ')

	try:
		scheduler.remove_job(f'sendtransac_{transaction_id}')
	except Exception:
		pass
	try:
		scheduler.remove_job(f'fsendtransac_{transaction_id}')
	except Exception:
		pass

	scheduler.add_job(
		send_message_about_transaction_to_user,
		trigger=IntervalTrigger(seconds=180),
		args=(
			sum_to_withdraw,
			transaction['partner_hash'],
			transaction_id,
			scheduler,
			get_emoji_by_method(method),
		),
		id=f'sendtransac_{transaction_id}',
		replace_existing=True,
	)

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_message(
			chat_id=admin,
			text=f"""‚úÖ–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω

üôé‚Äç‚ôÇÔ∏è –ù–∏–∫: {transaction['username']}
üõ° –•—ç—à: {transaction['partner_hash']}
üÜî ID –í—ã–≤–æ–¥–∞: {transaction['preview_id']}

–í—ã–≤–æ–¥: {get_emoji_by_method(method)}
–°—É–º–º–∞: {sum_to_withdraw}
{names.get(method, '–î–∞–Ω–Ω—ã–µ')}: <code>{data['withdraw_card']}</code>""",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.admin_change_transaction(transaction_id),
		)


@default_router.callback_query(F.data.startswith('badmin_disapprove_transaction'))
async def badmin_dispprove_transaction(call: CallbackQuery, state: FSMContext):
	transaction_id = int(
		call.data.replace('badmin_disapprove_transaction', '').split('_')[0]
	)
	admin_id = call.data.split('_')[-1]

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': transaction_id}}
	)
	transaction = transactions[0]['transactions'][-1]

	if transactions_schedulded.get(transaction['id'], False):
		await call.answer(
			f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction["preview_id"]} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
		)
		return

	transaction['approved'] = True

	await APIRequest.post('/transaction/update', {**transaction})

	await call.answer()

	await bot.send_message(
		chat_id=admin_id,
		text='–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞',
		reply_markup=inline.create_cancel_reason_markup(transaction_id),
	)
	await state.update_data(transac=transaction)
	await state.set_state(CancelTransaction.cancel_reason)


@default_router.callback_query(
	F.data == 'empty_cancel_reason', CancelTransaction.cancel_reason
)
async def empty_cancel_reason(
	call: CallbackQuery, state: FSMContext, scheduler=scheduler
):
	await state.update_data(cancel_reason=None)

	data = await state.get_data()
	data = data['transac']

	await call.answer()

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': data['id']}}
	)
	transaction = transactions[0]['transactions'][-1]

	transaction['approved'] = False

	await APIRequest.post('/transaction/update', {**transaction})
	sum_to_withdraw = f'{transaction["amount"]:,}'.replace(',', ' ')

	if transactions_schedulded.get(transaction['id'], False):
		await call.answer(
			f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction["preview_id"]} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
		)
		return

	try:
		scheduler.remove_job(f'sendtransac_{transaction["id"]}')
	except Exception:
		pass
	try:
		scheduler.remove_job(f'fsendtransac_{transaction["id"]}')
	except Exception:
		pass

	scheduler.add_job(
		send_message_about_ftransaction_to_user,
		trigger=IntervalTrigger(seconds=180),
		args=(
			None,
			sum_to_withdraw,
			transaction['partner_hash'],
			transaction['id'],
			scheduler,
		),
		id=f'fsendtransac_{transaction["id"]}',
		replace_existing=True,
	)

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_message(
			chat_id=admin,
			text=f"""
‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω

üôé‚Äç‚ôÇÔ∏è –ù–∏–∫: {transaction['username']}
üõ° –•—ç—à: {transaction['partner_hash']}
üÜî ID –í—ã–≤–æ–¥–∞: {transaction['preview_id']}

–í—ã–≤–æ–¥: üí≥ –ö–∞—Ä—Ç–∞
–°—É–º–º–∞: {sum_to_withdraw}
–ö–∞—Ä—Ç–∞: <code>{transaction['withdraw_card']}</code>	
""",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.admin_change_transaction(transaction['id']),
		)


@default_router.message(F.text, CancelTransaction.cancel_reason)
async def empty_cancel_reaso_msgn(
	message: Message, state: FSMContext, scheduler=scheduler
):
	await state.update_data(cancel_reason=message.text)

	data = await state.get_data()
	data = data['transac']

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': data['id']}}
	)
	transaction = transactions[0]['transactions'][-1]

	if transactions_schedulded.get(transaction['id'], False):
		await message.answer(
			f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction["preview_id"]} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
		)
		return

	transaction['approved'] = False

	await APIRequest.post('/transaction/update', {**transaction})
	sum_to_withdraw = f'{transaction["amount"]:,}'.replace(',', ' ')

	try:
		scheduler.remove_job(f'sendtransac_{transaction["id"]}')
	except Exception:
		pass
	try:
		scheduler.remove_job(f'fsendtransac_{transaction["id"]}')
	except Exception:
		pass

	scheduler.add_job(
		send_message_about_ftransaction_to_user,
		trigger=IntervalTrigger(seconds=180),
		args=(
			message.text,
			sum_to_withdraw,
			transaction['partner_hash'],
			transaction['id'],
			scheduler,
		),
		id=f'fsendtransac_{transaction["id"]}',
		replace_existing=True,
	)

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_message(
			chat_id=admin,
			text=f"""
‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω
–ü—Ä–∏—á–∏–Ω–∞: {message.text}

üôé‚Äç‚ôÇÔ∏è –ù–∏–∫: {transaction['username']}
üõ° –•—ç—à: {transaction['partner_hash']}
üÜî ID –í—ã–≤–æ–¥–∞: {transaction['preview_id']}

–í—ã–≤–æ–¥: üí≥ –ö–∞—Ä—Ç–∞
–°—É–º–º–∞: {sum_to_withdraw}
–ö–∞—Ä—Ç–∞: <code>{transaction['withdraw_card']}</code>
""",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.admin_change_transaction(transaction['id']),
		)


@default_router.callback_query(F.data.startswith('change_transaction_status'))
async def change_transaction_status(call: CallbackQuery):
	transaction_id = int(call.data.replace('change_transaction_status', ''))

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': transaction_id}}
	)
	transaction = transactions[0]['transactions'][-1]

	if transactions_schedulded.get(transaction['id'], False):
		await call.answer(
			f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction["preview_id"]} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
		)
		return

	partners = await APIRequest.post(
		'/partner/find', {'opts': {'partner_hash': transaction['partner_hash']}}
	)
	partner = partners[0]['partners'][-1]

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_message(
			chat_id=admin,
			text=f"""Tg id: {call.from_user.id}
–ù–∏–∫: {call.from_user.username}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}
–•—ç—à: {transaction['partner_hash']}
Id –í—ã–≤–æ–¥–∞: {transaction['preview_id']}

–í—ã–≤–æ–¥: üí≥ –ö–∞—Ä—Ç–∞
–°—É–º–º–∞: <code>{transaction['amount']}</code>‚ÇΩ
–ö–∞—Ä—Ç–∞: <code>{transaction['withdraw_card']}</code>""",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_admin_transaction_menu(
				transaction_id, admin, 'card'
			),
		)


############ STEAM


@default_router.callback_query(F.data == 'withdraw_steam', message_only_confirmed)
async def withdraw_steam_callback(call: CallbackQuery, state: FSMContext):
	await state.clear()

	users[call.message.chat.id] = {
		'final': True,
		'withdraw_card': True,
	}

	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]

	if not partner['approved']:
		print(partner)
		users[call.from_user.id] = users.get(call.from_user.id, {})
		users[call.from_user.id]['final'] = False
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	message = f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n–í—ã–≤–æ–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç Steam\n–õ–∏–º–∏—Ç –æ–¥–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞: –æ—Ç 2 000 ‚ÇΩ –¥–æ 12 000 ‚ÇΩ\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.'

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/steam.jpg')

	await call.message.edit_media(
		InputMediaPhoto(media=image, caption=message, parse_mode=ParseMode.HTML),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup('withdraw'),
	)

	await state.set_state(SteamWithdrawGroup.withdraw_sum)


@default_router.message(F.text, SteamWithdrawGroup.withdraw_sum, message_only_confirmed)
async def withdraw_steam_message(message: Message, state: FSMContext):
	user = users.get(message.chat.id, {})

	try:
		partners = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': message.from_user.id}}
		)
		partner = partners[0]['partners'][-1]
	except Exception as ex:
		await message.answer(
			f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}',
			reply_markup=inline.create_back_markup('profile'),
		)
		return

	try:
		sum_to_withdraw = int(message.text)
	except Exception:
		await message.answer(
			'–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.',
			reply_markup=inline.create_back_markup('withdraw_steam'),
		)
		await state.clear()
		return

	if user.get('final', False) and user.get('withdraw_card', False):
		if partner['balance'] < sum_to_withdraw:
			await message.answer(
				f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n\n–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.',
				reply_markup=inline.create_back_markup('withdraw_steam'),
			)

		elif sum_to_withdraw > 12000.0:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç\n\n–°—É–º–º–∞ {sum_to_withdraw} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º:',
				reply_markup=inline.create_back_markup('withdraw_steam'),
			)

		elif sum_to_withdraw < 2000.0:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞\n\n–°—É–º–º–∞ {sum_to_withdraw} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º.',
				reply_markup=inline.create_back_markup('withdraw_steam'),
			)

		else:
			await state.update_data(withdraw_sum=sum_to_withdraw)
			await message.answer(
				f"–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {sum_to_withdraw} ‚ÇΩ\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ steam\n\n–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤–∞—à Steam login –∫–ª–∏–∫–Ω—É–≤ –ø–æ <a href='https://store.steampowered.com/account/'>–ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ</a>",
				reply_markup=inline.create_back_markup('withdraw_steam'),
				parse_mode=ParseMode.HTML,
			)
			await state.set_state(SteamWithdrawGroup.withdraw_card)


@default_router.message(
	F.text, SteamWithdrawGroup.withdraw_card, message_only_confirmed
)
async def withdraw_withdraw_steam_message(message: Message, state: FSMContext):
	text = message.text

	await state.update_data(withdraw_card=text)
	data = await state.get_data()
	await message.answer(
		f'–õ–æ–≥–∏–Ω Steam –ø—Ä–∏–Ω—è—Ç.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. –°—É–º–º–∞: {data.get("withdraw_sum")} ‚ÇΩ\n\nSteam: {text}',
		reply_markup=inline.create_withdraw_continue_markup(withdraw='steam'),
	)
	await state.set_state(SteamWithdrawGroup.approved)


@default_router.callback_query(
	F.data == 'user_approve_steam_withdraw',
	SteamWithdrawGroup.approved,
	message_only_confirmed,
)
async def user_approve_steam_withdraw(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	user = users.get(call.message.chat.id, {})
	user['withdraw_card'] = False
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]
	await state.clear()

	partner_hash = partner.get('partner_hash', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')

	result, status = await APIRequest.post(
		'/transaction/create',
		data={
			'partner_hash': partner_hash,
			'username': str(call.from_user.username),
			'amount': data['withdraw_sum'],
			'withdraw_card': data['withdraw_card'],
			'approved': False,
			'preview_id': int(
				f'{datetime.now().strftime("%d%m%H%M%S")}{randint(1000, 9999)}'
			),
		},
	)

	if status != 200:
		await call.answer(f'–æ—à–∏–±–∫–∞: {status}')
		return

	transaction_id = result.get('transaction_id', 0)

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': transaction_id}}
	)
	transac = transactions[0]['transactions'][-1]

	await call.message.edit_text(
		f'–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\nüõ° –í–∞—à —Ö—ç—à: {partner_hash}\nüÜî ID –í—ã–≤–æ–¥–∞: {transac["preview_id"]}\n\n–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞. –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
		reply_markup=inline.create_back_markup('profile'),
	)

	tdata = withdraws_history.get(partner_hash, {})
	tdata[transac['preview_id']] = {
		'status': '‚ö™Ô∏è –í—ã–≤–æ–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
		'type': '‚öôÔ∏è Steam',
		'sum': data['withdraw_sum'],
		'date': datetime.now(),
	}
	withdraws_history[partner_hash] = tdata

	transactions_dict[transaction_id] = data

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/steam.jpg')

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_photo(
			chat_id=admin,
			photo=image,
			caption=f"""Tg id: {call.from_user.id}
–ù–∏–∫: {call.from_user.username}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}
–•—ç—à: {partner_hash}
Id –í—ã–≤–æ–¥–∞: {transac['preview_id']}

–í—ã–≤–æ–¥: ‚öôÔ∏è Steam
–°—É–º–º–∞: <code>{data['withdraw_sum']}</code>‚ÇΩ
Steam –ª–æ–≥–∏–Ω: <code>{data['withdraw_card']}</code>""",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_admin_transaction_menu(
				transaction_id, admin, 'steam'
			),
		)


############## PHONE NUMBER


@default_router.callback_query(F.data == 'withdraw_phone', message_only_confirmed)
async def withdraw_phone_callback(call: CallbackQuery, state: FSMContext):
	await state.clear()

	users[call.message.chat.id] = {
		'final': True,
		'withdraw_card': True,
	}

	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]

	if not partner['approved']:
		print(partner)
		users[call.from_user.id] = users.get(call.from_user.id, {})
		users[call.from_user.id]['final'] = False
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	message = f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n–í—ã–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–õ–∏–º–∏—Ç –æ–¥–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞: –æ—Ç 5 000 ‚ÇΩ –¥–æ 100 000 ‚ÇΩ\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.'

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/telefon.jpg')

	await call.message.edit_media(
		InputMediaPhoto(media=image, caption=message, parse_mode=ParseMode.HTML),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup('withdraw'),
	)

	await state.set_state(PhonenumberWithdrawGroup.withdraw_sum)


@default_router.message(
	F.text, PhonenumberWithdrawGroup.withdraw_sum, message_only_confirmed
)
async def withdraw_phone_message(message: Message, state: FSMContext):
	user = users.get(message.chat.id, {})

	try:
		partners = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': message.from_user.id}}
		)
		partner = partners[0]['partners'][-1]
	except Exception as ex:
		await message.answer(
			f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}',
			reply_markup=inline.create_back_markup('profile'),
		)
		return

	try:
		sum_to_withdraw = int(message.text)
	except Exception:
		await message.answer(
			'–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.',
			reply_markup=inline.create_back_markup('withdraw_phone'),
		)
		await state.clear()
		return

	if user.get('final', False) and user.get('withdraw_card', False):
		if partner['balance'] < sum_to_withdraw:
			await message.answer(
				f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n\n–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.',
				reply_markup=inline.create_back_markup('withdraw_phone'),
			)

		elif sum_to_withdraw > 100000.0:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç\n\n–°—É–º–º–∞ {sum_to_withdraw} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º:',
				reply_markup=inline.create_back_markup('withdraw_phone'),
			)

		elif sum_to_withdraw < 5000.0:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞\n\n–°—É–º–º–∞ {sum_to_withdraw} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º.',
				reply_markup=inline.create_back_markup('withdraw_phone'),
			)

		else:
			await state.update_data(withdraw_sum=sum_to_withdraw)
			await message.answer(
				f'–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {sum_to_withdraw} ‚ÇΩ\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
				reply_markup=inline.create_back_markup('withdraw_phone'),
				parse_mode=ParseMode.HTML,
			)
			await state.set_state(PhonenumberWithdrawGroup.withdraw_card)


@default_router.message(
	F.text, PhonenumberWithdrawGroup.withdraw_card, message_only_confirmed
)
async def withdraw_withdraw_phone_message(message: Message, state: FSMContext):
	text = message.text

	await state.update_data(withdraw_card=text)
	data = await state.get_data()
	await message.answer(
		f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. –°—É–º–º–∞: {data.get("withdraw_sum")} ‚ÇΩ\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {text}',
		reply_markup=inline.create_withdraw_continue_markup(withdraw='phone'),
	)
	await state.set_state(PhonenumberWithdrawGroup.approved)


@default_router.callback_query(
	F.data == 'user_approve_phone_withdraw',
	PhonenumberWithdrawGroup.approved,
	message_only_confirmed,
)
async def user_approve_phone_withdraw(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	user = users.get(call.message.chat.id, {})
	user['withdraw_card'] = False
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]
	await state.clear()

	partner_hash = partner.get('partner_hash', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')

	result, status = await APIRequest.post(
		'/transaction/create',
		data={
			'partner_hash': partner_hash,
			'username': str(call.from_user.username),
			'amount': data['withdraw_sum'],
			'withdraw_card': data['withdraw_card'],
			'approved': False,
			'preview_id': int(
				f'{datetime.now().strftime("%d%m%H%M%S")}{randint(1000, 9999)}'
			),
		},
	)

	if status != 200:
		await call.answer(f'–æ—à–∏–±–∫–∞: {status}')
		return

	transaction_id = result.get('transaction_id', 0)

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': transaction_id}}
	)
	transac = transactions[0]['transactions'][-1]

	await call.message.edit_text(
		f'–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\nüõ° –í–∞—à —Ö—ç—à: {partner_hash}\nüÜî ID –í—ã–≤–æ–¥–∞: {transac["preview_id"]}\n\n–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞. –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
		reply_markup=inline.create_back_markup('profile'),
	)

	tdata = withdraws_history.get(partner_hash, {})
	tdata[transac['preview_id']] = {
		'status': '‚ö™Ô∏è –í—ã–≤–æ–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
		'type': 'üì± –í—ã–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É',
		'sum': data['withdraw_sum'],
		'date': datetime.now(),
	}
	withdraws_history[partner_hash] = tdata

	transactions_dict[transaction_id] = data

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/telefon.jpg')

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_photo(
			chat_id=admin,
			photo=image,
			caption=f"""Tg id: {call.from_user.id}
–ù–∏–∫: {call.from_user.username}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}
–•—ç—à: {partner_hash}
Id –í—ã–≤–æ–¥–∞: {transac['preview_id']}

–í—ã–≤–æ–¥: üì± –í—ã–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É
–°—É–º–º–∞: <code>{data['withdraw_sum']}</code>‚ÇΩ
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{data['withdraw_card']}</code>""",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_admin_transaction_menu(
				transaction_id, admin, 'phone'
			),
		)


########## FK Wallet


@default_router.callback_query(F.data == 'withdraw_fkwallet', message_only_confirmed)
async def withdraw_fkwallet_callback(call: CallbackQuery, state: FSMContext):
	await state.clear()

	users[call.message.chat.id] = {
		'final': True,
		'withdraw_card': True,
	}

	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]

	if not partner['approved']:
		print(partner)
		users[call.from_user.id] = users.get(call.from_user.id, {})
		users[call.from_user.id]['final'] = False
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	message = f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n–í—ã–≤–æ–¥ –Ω–∞ FK Wallet\n–õ–∏–º–∏—Ç –æ–¥–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞: –æ—Ç 1 800 ‚ÇΩ –¥–æ 100 000 ‚ÇΩ\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.'

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/FK.jpg')

	await call.message.edit_media(
		InputMediaPhoto(media=image, caption=message, parse_mode=ParseMode.HTML),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup('withdraw'),
	)

	await state.set_state(FKWalletWithdrawGroup.withdraw_sum)


@default_router.message(
	F.text, FKWalletWithdrawGroup.withdraw_sum, message_only_confirmed
)
async def withdraw_fkwallet_message(message: Message, state: FSMContext):
	user = users.get(message.chat.id, {})

	try:
		partners = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': message.from_user.id}}
		)
		partner = partners[0]['partners'][-1]
	except Exception as ex:
		await message.answer(
			f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}',
			reply_markup=inline.create_back_markup('profile'),
		)
		return

	try:
		sum_to_withdraw = int(message.text)
	except Exception:
		await message.answer(
			'–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.',
			reply_markup=inline.create_back_markup('withdraw_fkwallet'),
		)
		await state.clear()
		return

	if user.get('final', False) and user.get('withdraw_card', False):
		if partner['balance'] < sum_to_withdraw:
			await message.answer(
				f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n\n–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.',
				reply_markup=inline.create_back_markup('withdraw_fkwallet'),
			)

		elif sum_to_withdraw > 100000.0:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç\n\n–°—É–º–º–∞ {sum_to_withdraw} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º:',
				reply_markup=inline.create_back_markup('withdraw_fkwallet'),
			)

		elif sum_to_withdraw < 1800.0:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞\n\n–°—É–º–º–∞ {sum_to_withdraw} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º.',
				reply_markup=inline.create_back_markup('withdraw_fkwallet'),
			)

		else:
			await state.update_data(withdraw_sum=sum_to_withdraw)
			await message.answer(
				f'–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {sum_to_withdraw} ‚ÇΩ\n\n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ F12345678',
				reply_markup=inline.create_back_markup('withdraw_fkwallet'),
				parse_mode=ParseMode.HTML,
			)
			await state.set_state(FKWalletWithdrawGroup.withdraw_card)


@default_router.message(
	F.text, FKWalletWithdrawGroup.withdraw_card, message_only_confirmed
)
async def withdraw_withdraw_fkwallet_message(message: Message, state: FSMContext):
	text = message.text

	await state.update_data(withdraw_card=text)
	data = await state.get_data()
	await message.answer(
		f'–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏–Ω—è—Ç.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. –°—É–º–º–∞: {data.get("withdraw_sum")} ‚ÇΩ\n\n–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞: {text}',
		reply_markup=inline.create_withdraw_continue_markup(withdraw='fkwallet'),
	)
	await state.set_state(FKWalletWithdrawGroup.approved)


@default_router.callback_query(
	F.data == 'user_approve_fkwallet_withdraw',
	FKWalletWithdrawGroup.approved,
	message_only_confirmed,
)
async def user_approve_fkwallet_withdraw(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	user = users.get(call.message.chat.id, {})
	user['withdraw_card'] = False
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]
	await state.clear()

	partner_hash = partner.get('partner_hash', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')

	result, status = await APIRequest.post(
		'/transaction/create',
		data={
			'partner_hash': partner_hash,
			'username': str(call.from_user.username),
			'amount': data['withdraw_sum'],
			'withdraw_card': data['withdraw_card'],
			'approved': False,
			'preview_id': int(
				f'{datetime.now().strftime("%d%m%H%M%S")}{randint(1000, 9999)}'
			),
		},
	)

	if status != 200:
		await call.answer(f'–æ—à–∏–±–∫–∞: {status}')
		return

	transaction_id = result.get('transaction_id', 0)

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': transaction_id}}
	)
	transac = transactions[0]['transactions'][-1]

	await call.message.edit_text(
		f'–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\nüõ° –í–∞—à —Ö—ç—à: {partner_hash}\nüÜî ID –í—ã–≤–æ–¥–∞: {transac["preview_id"]}\n\n–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞. –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
		reply_markup=inline.create_back_markup('profile'),
	)

	tdata = withdraws_history.get(partner_hash, {})
	tdata[transac['preview_id']] = {
		'status': '‚ö™Ô∏è –í—ã–≤–æ–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
		'type': 'üëæ FK Wallet',
		'sum': data['withdraw_sum'],
		'date': datetime.now(),
	}
	withdraws_history[partner_hash] = tdata

	transactions_dict[transaction_id] = data

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/FK.jpg')

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_photo(
			chat_id=admin,
			photo=image,
			caption=f"""Tg id: {call.from_user.id}
–ù–∏–∫: {call.from_user.username}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}
–•—ç—à: {partner_hash}
Id –í—ã–≤–æ–¥–∞: {transac['preview_id']}

–í—ã–≤–æ–¥: üëæ FK Wallet
–°—É–º–º–∞: <code>{data['withdraw_sum']}</code>‚ÇΩ
–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞: <code>{data['withdraw_card']}</code>""",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_admin_transaction_menu(
				transaction_id, admin, 'fkwallet'
			),
		)


########## üå∏ Piastrix


@default_router.callback_query(F.data == 'withdraw_piastrix', message_only_confirmed)
async def withdraw_piastrix_callback(call: CallbackQuery, state: FSMContext):
	await state.clear()

	users[call.message.chat.id] = {
		'final': True,
		'withdraw_card': True,
	}

	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]

	if not partner['approved']:
		print(partner)
		users[call.from_user.id] = users.get(call.from_user.id, {})
		users[call.from_user.id]['final'] = False
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	message = f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n–í—ã–≤–æ–¥ –Ω–∞ Piastrix\n–õ–∏–º–∏—Ç –æ–¥–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞: –æ—Ç 1 800 ‚ÇΩ –¥–æ 100 000 ‚ÇΩ\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.'

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/piastrix.jpg')

	await call.message.edit_media(
		InputMediaPhoto(media=image, caption=message, parse_mode=ParseMode.HTML),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup('withdraw'),
	)

	await state.set_state(PiastrixWithdrawGroup.withdraw_sum)


@default_router.message(
	F.text, PiastrixWithdrawGroup.withdraw_sum, message_only_confirmed
)
async def withdraw_piastrix_message(message: Message, state: FSMContext):
	user = users.get(message.chat.id, {})

	try:
		partners = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': message.from_user.id}}
		)
		partner = partners[0]['partners'][-1]
	except Exception as ex:
		await message.answer(
			f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}',
			reply_markup=inline.create_back_markup('profile'),
		)
		return

	try:
		sum_to_withdraw = int(message.text)
	except Exception:
		await message.answer(
			'–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.',
			reply_markup=inline.create_back_markup('withdraw_piastrix'),
		)
		await state.clear()
		return

	if user.get('final', False) and user.get('withdraw_card', False):
		if partner['balance'] < sum_to_withdraw:
			await message.answer(
				f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n\n–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.',
				reply_markup=inline.create_back_markup('withdraw_piastrix'),
			)

		elif sum_to_withdraw > 100000.0:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç\n\n–°—É–º–º–∞ {sum_to_withdraw} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º:',
				reply_markup=inline.create_back_markup('withdraw_piastrix'),
			)

		elif sum_to_withdraw < 1800.0:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞\n\n–°—É–º–º–∞ {sum_to_withdraw} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º.',
				reply_markup=inline.create_back_markup('withdraw_piastrix'),
			)

		else:
			await state.update_data(withdraw_sum=sum_to_withdraw)
			await message.answer(
				f'–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {sum_to_withdraw} ‚ÇΩ\n\n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ email Piastrix',
				reply_markup=inline.create_back_markup('withdraw_piastrix'),
				parse_mode=ParseMode.HTML,
			)
			await state.set_state(PiastrixWithdrawGroup.withdraw_card)


@default_router.message(
	F.text, PiastrixWithdrawGroup.withdraw_card, message_only_confirmed
)
async def withdraw_withdraw_piastrix_message(message: Message, state: FSMContext):
	text = message.text

	await state.update_data(withdraw_card=text)
	data = await state.get_data()
	await message.answer(
		f'–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏–Ω—è—Ç.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. –°—É–º–º–∞: {data.get("withdraw_sum")} ‚ÇΩ\n\n–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞/email: {text}',
		reply_markup=inline.create_withdraw_continue_markup(withdraw='piastrix'),
	)
	await state.set_state(PiastrixWithdrawGroup.approved)


@default_router.callback_query(
	F.data == 'user_approve_piastrix_withdraw',
	PiastrixWithdrawGroup.approved,
	message_only_confirmed,
)
async def user_approve_piastrix_withdraw(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	user = users.get(call.message.chat.id, {})
	user['withdraw_card'] = False
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]
	await state.clear()

	partner_hash = partner.get('partner_hash', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')

	result, status = await APIRequest.post(
		'/transaction/create',
		data={
			'partner_hash': partner_hash,
			'username': str(call.from_user.username),
			'amount': data['withdraw_sum'],
			'withdraw_card': data['withdraw_card'],
			'approved': False,
			'preview_id': int(
				f'{datetime.now().strftime("%d%m%H%M%S")}{randint(1000, 9999)}'
			),
		},
	)

	if status != 200:
		await call.answer(f'–æ—à–∏–±–∫–∞: {status}')
		return

	transaction_id = result.get('transaction_id', 0)

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': transaction_id}}
	)
	transac = transactions[0]['transactions'][-1]

	await call.message.edit_text(
		f'–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\nüõ° –í–∞—à —Ö—ç—à: {partner_hash}\nüÜî ID –í—ã–≤–æ–¥–∞: {transac["preview_id"]}\n\n–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞. –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
		reply_markup=inline.create_back_markup('profile'),
	)

	tdata = withdraws_history.get(partner_hash, {})
	tdata[transac['preview_id']] = {
		'status': '‚ö™Ô∏è –í—ã–≤–æ–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
		'type': 'üå∏ Piastrix',
		'sum': data['withdraw_sum'],
		'date': datetime.now(),
	}
	withdraws_history[partner_hash] = tdata

	transactions_dict[transaction_id] = data

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/piastrix.jpg')

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_photo(
			chat_id=admin,
			photo=image,
			caption=f"""Tg id: {call.from_user.id}
–ù–∏–∫: {call.from_user.username}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}
–•—ç—à: {partner_hash}
Id –í—ã–≤–æ–¥–∞: {transac['preview_id']}

–í—ã–≤–æ–¥: üå∏ Piastrix
–°—É–º–º–∞: <code>{data['withdraw_sum']}</code>‚ÇΩ
–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞: <code>{data['withdraw_card']}</code>""",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_admin_transaction_menu(
				transaction_id, admin, 'piastrix'
			),
		)


############################################
############## DEFAULT ROUTER ##############
###########################################


@default_router.message(F.text)
async def text_handler(message: Message):
	user = users.get(message.chat.id, {})
	await message.delete()

	if user.get('final', False):
		await message.answer(
			'üè†Ô∏è <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!</b>\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SinWin!',
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_main_menu_markup(message.from_user.id),
		)
		return
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': message.from_user.id}}
	)
	partner = partners[0]['partners']

	if partner:
		partner = partner[-1]

		if not partner['approved']:
			await message.answer(
				'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –≠—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç.',
				parse_mode=ParseMode.HTML,
				reply_markup=inline.create_start_markup(),
			)
