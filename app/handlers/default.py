from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message

from apscheduler.triggers.interval import IntervalTrigger

from app.api import APIRequest
from app.loader import config, bot, scheduler
import app.keyboards.menu_inline as inline
from app.database.test import users
from app.utils.algorithms import is_valid_card

only_confirmed = lambda call: users.get(call.from_user.id, {}).get('final', False) is True or call.from_user.id in config.secrets.ADMINS_IDS  # noqa: E731
message_only_confirmed = lambda message: users.get(message.from_user.id, {}).get('final', False) is True or message.from_user.id in config.secrets.ADMINS_IDS  # noqa: E731

default_router = Router()
alerts = True

transactions_dict = {}
transactions_schedulded = {}
withdraws_history = {}

class CardWithdrawGroup(StatesGroup):
	withdraw_sum = State()
	withdraw_card = State()
	approved = State()


class SteamWidthDrawGroup(StatesGroup):
	withdraw_sum = State()
	steam_login = State()


class PromoGroup(StatesGroup):
	promocode = State()


class CancelTransaction(StatesGroup):
	transac = State()
	cancel_reason = State()


async def collect_stats(opts: dict):
	result, status = await APIRequest.post("/user/find", {"opts": opts})

	# if opts.get('game', False):
		#result_incomes, status2 = await APIRequest.get(f"/base/incomes?game={opts['game']}")
		#incomes = result_incomes["income_stat"]
		#postbacks = result_incomes["postbacks_stat"]

	today = datetime.now().date()
	yesterday = today - timedelta(days=1)
	last_week_start = today - timedelta(days=today.weekday() + 7)
	last_week_end = last_week_start + timedelta(days=6)
	last_month_start = today - relativedelta(months=1)
	last_month_end = last_month_start + relativedelta(day=31)

	users = result["users"]

	users_count = len(users)
	users_income = sum([user["income"] for user in users])
	users_notreg_count = len([user for user in users if not user["approved"]])
	users_nottopup_count = len(
		[user for user in users if user["balance"] < 500.0 and user["approved"]]
	)
	users_gamed_count = len(
		[user for user in users if user["balance"] > 500.0 and user["approved"]]
	)

	users_today = [
		user
		for user in users
		if datetime.strptime(user["register_date"], "%Y-%m-%dT%H:%M:%S").date() == today
	]
	users_yesterday = [
		user
		for user in users
		if datetime.strptime(user["register_date"], "%Y-%m-%dT%H:%M:%S").date()
		== yesterday
	]
	users_lastweek = [
		user
		for user in users
		if last_week_start
		<= datetime.strptime(user["register_date"], "%Y-%m-%dT%H:%M:%S").date()
		<= last_week_end
	]
	users_month = [
		user
		for user in users
		if last_month_start
		<= datetime.strptime(user["register_date"], "%Y-%m-%dT%H:%M:%S").date()
		<= last_month_end
	]

	users_today = len(users_today)
	users_yesterday = len(users_yesterday)
	users_lastweek = len(users_lastweek)
	users_month = len(users_month)
 
	return {
		'users_count': users_count,
		'users_today': users_today,
		'users_yesterday': users_yesterday,
		'users_lastweek': users_lastweek,
		'users_month': users_month,
		'users_notreg_count': users_notreg_count,
		"users_nottopup_count": users_nottopup_count,
		"users_gamed_count": users_gamed_count,
		"users_income": users_income
	}


@default_router.callback_query(F.data == "statistics", only_confirmed)
async def statistics_callback(call: CallbackQuery):
	result, code = await APIRequest.get('/base/stats')

	stats = result['data']

	if call.from_user.id in config.secrets.ADMINS_IDS:
		data = await collect_stats({})

		today_deps = sum([dep['amount'] for dep in stats['today']['dep']])
		yesterday_deps = sum([dep['amount'] for dep in stats['yesterday']['dep']])
		last_week_deps = sum([dep['amount'] for dep in stats['last_week']['dep']])
		last_month_deps = sum([dep['amount'] for dep in stats['last_month']['dep']])

		today_firstdeps = sum([dep['amount'] for dep in stats['today']['firstdep']])
		yesterday_firstdeps = sum([dep['amount'] for dep in stats['yesterday']['firstdep']])
		last_week_firstdeps = sum([dep['amount'] for dep in stats['last_week']['firstdep']])
		last_month_firstdeps = sum([dep['amount'] for dep in stats['last_month']['firstdep']])

		today_income = sum([dep['income'] for dep in stats['today']['income']])
		yesterday_income = sum([dep['income'] for dep in stats['yesterday']['income']])
		last_week_income = sum([dep['income'] for dep in stats['last_week']['income']])
		last_month_income = sum([dep['income'] for dep in stats['last_month']['income']])

		alltime_deps = today_deps + yesterday_deps + last_week_deps + last_month_deps
		alltime_firstdeps = today_firstdeps + yesterday_firstdeps + last_week_firstdeps + last_month_firstdeps

		balance, status_code = await APIRequest.get("/base/admin_balance")

		signals_gens = [[info[k] for k, _ in info.items()] for _, info in result['signals'].items()]
		signals_gens = sum(sum(x) for x in signals_gens)

		messages = [
			"<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ë–û–¢–ê–ú</b>\n",
			f"üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {balance['balance']} RUB\n",
			f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data['users_count']}",
			f"–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_deps}",
			f"–î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {data['users_income']}",
			f"–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_firstdeps}",
			f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_gens}\n",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data['users_notreg_count']}",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {data['users_nottopup_count']}",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–≥—Ä—ã: {data['users_gamed_count']}\n",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data['users_today']}",
			f"‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞: {data['users_yesterday']}",
			f"‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {data['users_lastweek']}",
			f"‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {data['users_month']}\n",
			f"–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_deps}",
			f"‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_deps}",
			f"‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_deps}",
			f"‚îî –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {last_month_deps}\n",
			f"–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_firstdeps}",
			f"‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {yesterday_firstdeps}",
			f"‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_firstdeps}",
			f"‚îî –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {last_month_firstdeps}\n",
			f"–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_income}",
			f"‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_income}",
			f"‚îú –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_income}",
			f"‚îî –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {last_month_income}",
		]
	else:
		partners = await APIRequest.post("/partner/find", {"opts": {"tg_id": call.from_user.id}})
		partner = partners[0]['partners'][-1]

		if not partner['approved']:
			print(partner)
			users[call.from_user.id] = users.get(call.from_user.id, {})
			users[call.from_user.id]['final'] = False
			await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
			return
		
		opts = {'referal_parent': partner["partner_hash"]}
  
		data = await collect_stats(opts)

		today_deps = sum([dep['amount'] for dep in stats['today']['dep']])
		yesterday_deps = sum([dep['amount'] for dep in stats['yesterday']['dep']])
		last_week_deps = sum([dep['amount'] for dep in stats['last_week']['dep']])
		last_month_deps = sum([dep['amount'] for dep in stats['last_month']['dep']])

		today_firstdeps = sum([dep['amount'] for dep in stats['today']['firstdep']])
		yesterday_firstdeps = sum([dep['amount'] for dep in stats['yesterday']['firstdep']])
		last_week_firstdeps = sum([dep['amount'] for dep in stats['last_week']['firstdep']])
		last_month_firstdeps = sum([dep['amount'] for dep in stats['last_month']['firstdep']])

		today_income = sum([dep['x'] for dep in stats['today']['income']])
		yesterday_income = sum([dep['x'] for dep in stats['yesterday']['income']])
		last_week_income = sum([dep['x'] for dep in stats['last_week']['income']])
		last_month_income = sum([dep['x'] for dep in stats['last_month']['income']])

		alltime_deps = today_deps + yesterday_deps + last_week_deps + last_month_deps
		alltime_firstdeps = today_firstdeps + yesterday_firstdeps + last_week_firstdeps + last_month_firstdeps
		alltime_income = today_income + yesterday_income + last_week_income + last_month_income

		signals_gens = sum([info[partner['partner_hash']] for _, info in result['signals'].items()])

		messages = [
			"<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ë–û–¢–ê–ú</b>",
			"<code>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º</code>\n",
			f"üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner['balance']} RUB\n",
			f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data['users_count']}",
			f"–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_deps}",
			f"–î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_income}",
			f"–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_firstdeps}",
			f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_gens}\n",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data['users_notreg_count']}",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {data['users_nottopup_count']}",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–≥—Ä—ã: {data['users_gamed_count']}\n",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data['users_today']}",
			f"‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞: {data['users_yesterday']}",
			f"‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {data['users_lastweek']}",
			f"‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {data['users_month']}\n",
			f"–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_deps}",
			f"‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_deps}",
			f"‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_deps}",
			f"‚îî –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {last_month_deps}\n",
			f"–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_firstdeps}",
			f"‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {yesterday_firstdeps}",
			f"‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_firstdeps}",
			f"‚îî –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {last_month_firstdeps}\n",
			f"–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_income}",
			f"‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_income}",
			f"‚îú –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_income}",
			f"‚îî –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {last_month_income}",
		]

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_statistics_bot_menu(),
	)


@default_router.callback_query(F.data == "statistics_mines", only_confirmed)
async def statistics_mines_callback(call: CallbackQuery):
	result, code = await APIRequest.get('/base/stats')

	stats = result['data']

	if call.from_user.id in config.secrets.ADMINS_IDS:
		data = await collect_stats({'game': 'Mines'})

		today_deps = sum([dep['amount'] for dep in stats['today']['dep'] if dep['game'] == 'Mines'])
		yesterday_deps = sum([dep['amount'] for dep in stats['yesterday']['dep'] if dep['game'] == 'Mines'])
		last_week_deps = sum([dep['amount'] for dep in stats['last_week']['dep'] if dep['game'] == 'Mines'])
		last_month_deps = sum([dep['amount'] for dep in stats['last_month']['dep'] if dep['game'] == 'Mines'])

		today_firstdeps = sum([dep['amount'] for dep in stats['today']['firstdep'] if dep['game'] == 'Mines'])
		yesterday_firstdeps = sum([dep['amount'] for dep in stats['yesterday']['firstdep'] if dep['game'] == 'Mines'])
		last_week_firstdeps = sum([dep['amount'] for dep in stats['last_week']['firstdep'] if dep['game'] == 'Mines'])
		last_month_firstdeps = sum([dep['amount'] for dep in stats['last_month']['firstdep'] if dep['game'] == 'Mines'])

		today_income = sum([dep['income'] for dep in stats['today']['income'] if dep['game'] == 'Mines'])
		yesterday_income = sum([dep['income'] for dep in stats['yesterday']['income'] if dep['game'] == 'Mines'])
		last_week_income = sum([dep['income'] for dep in stats['last_week']['income'] if dep['game'] == 'Mines'])
		last_month_income = sum([dep['income'] for dep in stats['last_month']['income'] if dep['game'] == 'Mines'])

		alltime_deps = today_deps + yesterday_deps + last_week_deps + last_month_deps
		alltime_firstdeps = today_firstdeps + yesterday_firstdeps + last_week_firstdeps + last_month_firstdeps

		signals_gens = [[info[k] for k, _ in info.items()] for name, info in result['signals'].items() if name == 'Mines']
		signals_gens = sum(sum(x) for x in signals_gens)

		balance, status_code = await APIRequest.get("/base/admin_balance")

		messages = [
			"<b>üí£Ô∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û MINES</b>\n",
			f"üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {balance['balance']} RUB\n",
			f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data['users_count']}",
			f"–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_deps}",
			f"–î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {data['users_income']}",
			f"–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_firstdeps}",
			f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_gens}\n",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data['users_notreg_count']}",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {data['users_nottopup_count']}",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–≥—Ä—ã: {data['users_gamed_count']}\n",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data['users_today']}",
			f"‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞: {data['users_yesterday']}",
			f"‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {data['users_lastweek']}",
			f"‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {data['users_month']}\n",
			f"–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_deps}",
			f"‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_deps}",
			f"‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_deps}",
			f"‚îî –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {last_month_deps}\n",
			f"–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_firstdeps}",
			f"‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {yesterday_firstdeps}",
			f"‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_firstdeps}",
			f"‚îî –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {last_month_firstdeps}\n",
			f"–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_income}",
			f"‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_income}",
			f"‚îú –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_income}",
			f"‚îî –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {last_month_income}",
		]
	else:
		partners = await APIRequest.post("/partner/find", {"opts": {"tg_id": call.from_user.id}})
		partner = partners[0]['partners'][-1]

		if not partner['approved']:
			print(partner)
			users[call.from_user.id] = users.get(call.from_user.id, {})
			users[call.from_user.id]['final'] = False
			await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
			return
		
		opts = {'game': 'Mines', 'referal_parent': partner["partner_hash"]}
  
		data = await collect_stats(opts)

		today_deps = sum([dep['amount'] for dep in stats['today']['dep'] if dep['game'] == 'Mines'])
		yesterday_deps = sum([dep['amount'] for dep in stats['yesterday']['dep'] if dep['game'] == 'Mines'])
		last_week_deps = sum([dep['amount'] for dep in stats['last_week']['dep'] if dep['game'] == 'Mines'])
		last_month_deps = sum([dep['amount'] for dep in stats['last_month']['dep'] if dep['game'] == 'Mines'])

		today_firstdeps = sum([dep['amount'] for dep in stats['today']['firstdep'] if dep['game'] == 'Mines'])
		yesterday_firstdeps = sum([dep['amount'] for dep in stats['yesterday']['firstdep'] if dep['game'] == 'Mines'])
		last_week_firstdeps = sum([dep['amount'] for dep in stats['last_week']['firstdep'] if dep['game'] == 'Mines'])
		last_month_firstdeps = sum([dep['amount'] for dep in stats['last_month']['firstdep'] if dep['game'] == 'Mines'])

		today_income = sum([dep['x'] for dep in stats['today']['income'] if dep['game'] == 'Mines'])
		yesterday_income = sum([dep['x'] for dep in stats['yesterday']['income'] if dep['game'] == 'Mines'])
		last_week_income = sum([dep['x'] for dep in stats['last_week']['income'] if dep['game'] == 'Mines'])
		last_month_income = sum([dep['x'] for dep in stats['last_month']['income'] if dep['game'] == 'Mines'])

		alltime_deps = today_deps + yesterday_deps + last_week_deps + last_month_deps
		alltime_firstdeps = today_firstdeps + yesterday_firstdeps + last_week_firstdeps + last_month_firstdeps
		alltime_income = today_income + yesterday_income + last_week_income + last_month_income

		signals_gens = sum([info[partner['partner_hash']] for _, info in result['signals'].items()])

		messages = [
			"<b>üí£Ô∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û MINES</b>",
			"<code>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º</code>\n",
			f"üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner['balance']} RUB\n",
			f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data['users_count']}",
			f"–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_deps}",
			f"–î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_income}",
			f"–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {alltime_firstdeps}",
			f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_gens}\n",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data['users_notreg_count']}",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {data['users_nottopup_count']}",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–≥—Ä—ã: {data['users_gamed_count']}\n",
			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data['users_today']}",
			f"‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞: {data['users_yesterday']}",
			f"‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {data['users_lastweek']}",
			f"‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {data['users_month']}\n",
			f"–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_deps}",
			f"‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_deps}",
			f"‚îú –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_deps}",
			f"‚îî –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {last_month_deps}\n",
			f"–ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_firstdeps}",
			f"‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {yesterday_firstdeps}",
			f"‚îú –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_firstdeps}",
			f"‚îî –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {last_month_firstdeps}\n",
			f"–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_income}",
			f"‚îú –î–æ—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {yesterday_income}",
			f"‚îú –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {last_week_income}",
			f"‚îî –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {last_month_income}",
		]

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_mines_statistics_menu(),
	)


@default_router.callback_query(F.data.startswith("referal"), only_confirmed)
async def referal_callback(call: CallbackQuery):
	messages = [
		"–ü–æ–º–æ–≥–∏—Ç–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ!\n",
		"–ú—ã –∏—â–µ–º —Ç–æ–ª—å–∫–æ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ —Å –æ–ø—ã—Ç–æ–º –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ.\n\n<code>üí∞Ô∏è –£—Å–ª–æ–≤–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è</code>\n",
		"<b>–î–ª—è –≤–∞—Å:</b>",
		'–í—ã –ø–æ–ª—É—á–∏—Ç–µ 15 000 —Ä—É–±–ª–µ–π –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–π–¥–µ—Ç –¥–æ —Å—Ç–∞—Ç—É—Å–∞ "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª".\n',
		"<b>–î–ª—è –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞:</b>",
		'–í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç —Å—Ç–∞—Ç—É—Å "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 40%" –≤–º–µ—Å—Ç–æ "–ù–æ–≤–∏—á–æ–∫ 35%" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ —Ä–∞–±–æ—Ç—ã.\n',
		"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/SinWinBot?start={hash}</code>",
	]

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_referals_markup(),
	)


@default_router.callback_query(F.data.startswith("about_us"), only_confirmed)
async def about_uscallback(call: CallbackQuery):
	messages = [
		'–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –Ω–∞ <a href="https://t.me/+W8_28FXJWXIxZTgy">–∫–∞–Ω–∞–ª–µ SinWin</a>. –¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≤–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.\n',
		"–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! –ú—ã –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É, –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å–∞–º, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏ –æ—Ç–∑—ã–≤–∞–º.\n",
		"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SinWin!",
	]

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_about_us_markup(),
	)


@default_router.callback_query(F.data.startswith("my_referals"), only_confirmed)
async def referal_answer_callback(call: CallbackQuery):
	await call.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", show_alert=True)


@default_router.callback_query(F.data.startswith("reload_achievs"), only_confirmed)
async def reload_achievs_callback(call: CallbackQuery):
	await call.answer("–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–µ –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", show_alert=True)


@default_router.callback_query(F.data.startswith("my_achievs"), only_confirmed)
async def my_achievs_callback(call: CallbackQuery):
	messages = [
		"üèÜÔ∏è –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n",
		"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 4\n",
		"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –í–∞—à–∏–º —Å—Å—ã—å–∫–∞–º: 100, 250\n",
		"‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã: 10 000, 25 000, 50 000 —Ä—É–±–ª–µ–π\n",
		"‚úÖ –î–æ—Ö–æ–¥: 5 000, 10 000, 25 000 —Ä—É–±–ª–µ–π\n",
		"‚úÖ –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã: 25, 50, 75, 100, 150\n",
		"–¢–æ–ø –í–æ—Ä–∫–µ—Ä–æ–≤:\n",
		"ü•á 1 –º–µ—Å—Ç–æ –∑–∞ –¥–µ–∫–∞–±—Ä—å 2024\n",
		"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç! üåü",
	]

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup("achievements"),
	)


@default_router.callback_query(F.data.startswith("achievements"), only_confirmed)
async def achievements_callback(call: CallbackQuery):
	global alerts

	if call.data == "achievements_false":
		alerts = not alerts

	messages = [
		"üèÜÔ∏è –í–∞—à–∏ –¶–µ–ª–∏:\n",
		"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º: 100\n‚ùå –î–µ–ø–æ–∑–∏—Ç—ã: 10 000 —Ä—É–±–ª–µ–π\n‚ùå –î–æ—Ö–æ–¥: 5 000 —Ä—É–±–ª–µ–π",
		"‚ùå –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã: 25",
		"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 1",
		"‚ùå –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: 250\n",
	]

	messages.append(
		"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n" if alerts else "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã\n"
	)

	messages.append("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç! üåü")

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_achievements_markup(alerts),
	)


@default_router.callback_query(F.data == "record_creo", only_confirmed)
async def record_creo_callback(call: CallbackQuery):
	messages = [
		"–í —ç—Ç–∏—Ö –±–æ—Ç–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∑–∞–ø–∏—Å–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã:\n",
		"Mines –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∏–Ω: @iZiMinsBot",
		"Mines –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–Ω: @iZiMin_Bot",
		"Speed Cash: @SPDCashsBot",
		"LuckyJet: @CashJetsBot",
		"Coin Flip: @WinFlipsBot\n",
		"–î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º–∏ –±–æ—Ç–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π. –í –Ω–µ–π –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤.",
	]
	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_record_creo_markup(),
	)


@default_router.callback_query(F.data == "work", only_confirmed)
async def work_callback(call: CallbackQuery):
	try:
		partners = await APIRequest.post("/partner/find", {"opts": {"tg_id": call.from_user.id}})
		partner = partners[0]['partners'][-1]
	except Exception:
		messages = [
			"üíªÔ∏è WORK\n\n<b>–°–°–´–õ–ö–ò –ù–ê –ë–û–¢–û–í</b>\nMines - <code>https://t.me/IziMin_test_Bot</code>",
			"Lucky Jet - <code>https://t.me/CashJetBot</code>",
			"Speed Cash - <code>https://t.me/SPDCashBot</code>",
			"Coin Flip - <code>https://t.me/CoinFlipBot</code>",
		]
		await call.message.edit_text(
			"\n".join(messages),
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_work_markup(),
		)
		return

	partner_hash = partner.get("partner_hash", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
	messages = [
		f"üíªÔ∏è WORK\n\n<b>–°–°–´–õ–ö–ò –ù–ê –ë–û–¢–û–í</b>\nMines - <code>https://t.me/IziMin_test_Bot?start={partner_hash}</code>",
		f"Lucky Jet - <code>https://t.me/CashJetBot?start={partner_hash}</code>",
		f"Speed Cash - <code>https://t.me/SPDCashBot?start={partner_hash}</code>",
		f"Coin Flip - <code>https://t.me/CoinFlipBot?start={partner_hash}</code>",
	]
	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_work_markup(),
	)


@default_router.callback_query(F.data.startswith("showmenu"), only_confirmed)
async def showmenu_callback(call: CallbackQuery):
	if call.data == "showmenu_after_reg":
		await call.message.delete()
		await call.message.answer(
			"üè†Ô∏è <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!</b>\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SinWin!",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_main_menu_markup(),
		)
	else:
		await call.message.edit_text(
			"üè†Ô∏è <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!</b>\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SinWin!",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_main_menu_markup(),
		)


@default_router.callback_query(F.data.startswith("admin_"), only_confirmed)
async def adminpanel_query_callback(call: CallbackQuery):
	await call.message.edit_text(
		"–ó–ê–ì–õ–£–®–ö–ê", reply_markup=inline.create_back_markup("showmenu")
	)


@default_router.callback_query(F.data == "adminpanel")
async def adminpanel_callback(call: CallbackQuery):
	# ‚îî‚îè ‚îú„Äå‚îå
	messages = [
		"‚îå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∫–µ: 10",
		"‚îú –ë–∞–ª–∞–Ω—Å –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∏: 100 000 —Ä—É–±–ª–µ–π",
		"‚îú –î–æ—Ö–æ–¥ –±–æ—Ç–∞: 10 000 000 —Ä—É–±–ª–µ–π",
		"‚îú –ë–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 15 000 500 —Ä—É–±–ª–µ–π",
		f'‚îî –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤—ã–≤–æ–¥ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}: 100 000 —Ä—É–±–ª–µ–π',
	]

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_adminpanel_markup(),
	)


@default_router.callback_query(F.data == "top_workers", only_confirmed)
async def top_workers_callback(call: CallbackQuery):
	# ü•áü•àü•âüèÖ
	result, code = await APIRequest.get('/base/stats?exclude=1')

	stats = result['data']
	income = stats['last_month']['income'] + stats['today']['income'] + stats['last_week']['income'] + stats['yesterday']['income']

	userp = None
	status = False
	state = 0

	partners = {}

	if call.from_user.id not in config.secrets.ADMINS_IDS:
		result = await APIRequest.post("/partner/find", {"opts": {"tg_id": call.from_user.id}})
		user = result[0]['partners']

		if user:
			user = user[-1]
			userp = user['partner_hash']
		else:
			await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
			return

	print(income)

	for partner in income:
		partner_hash = partner['partner_hash']
		if userp == partner_hash:
			status = True

		partners[partner_hash] = partner['x']
	
	partners = dict(sorted(partners.items(), key=lambda item: item[1], reverse=True))

	partners = dict(list(partners.items())[:5])

	if status:
		state = list(partners).index(userp) + 1

	messages = [
		"üèÜÔ∏è –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø–æ –¥–æ—Ö–æ–¥—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
	]

	for i, (partner_hash, income) in enumerate(partners.items()):
		messages.append('')
		partner_hash = partner_hash[:3] + '****' + partner_hash[7:]

		if i == 0:
			messages.append(f'ü•á {partner_hash}: {income} —Ä—É–±–ª–µ–π')
		elif i == 1:
			messages.append(f'ü•à {partner_hash}: {income} —Ä—É–±–ª–µ–π')
		elif i == 3:
			messages.append(f'ü•â {partner_hash}: {income} —Ä—É–±–ª–µ–π')
		else:
			messages.append(f'üèÖ {partner_hash}: {income} —Ä—É–±–ª–µ–π')
	
	if status:
		messages.append(f"üëΩÔ∏è –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ: {state}\n")
	else:
		messages.append("")

	messages += [
		"üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω—É–ª—è–µ—Ç—Å—è 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.\n",
		'<code>üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–Ω—è–≤—à–∏–π –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ, –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ, –µ—Å–ª–∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª" –∏–ª–∏ –Ω–∏–∂–µ.</code>',
		"<code>üíµ –í—Ç–æ—Ä–æ–µ –∏ —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–∞ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–º–∏—é.</code>\n\n"
		"üöÄ –£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç!",
	]

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup("showmenu"),
	)


@default_router.callback_query(F.data == "withdraws_history", only_confirmed)
async def withdraws_history_callback(call: CallbackQuery):
	# üü¢üü°‚ö™Ô∏è
	result = await APIRequest.post("/partner/find", {"opts": {"tg_id": call.from_user.id}})
	user = result[0]['partners']

	if not user:
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	user = user[-1]

	# data = withdraws_history.get(partner_hash, {})
	# data[transaction_id] = {
	# 	'status': '‚ö™Ô∏è –í—ã–≤–æ–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
	# 	'type': 'üí≥ –ö–∞—Ä—Ç–∞',
	# 	'sum': data['withdraw_sum'],
	# 	'date': datetime.now()
	# }
	# withdraws_history[partner_hash] = data

	if not withdraws_history.get(user['partner_hash'], False):
		messages = ["ü§ñ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤: 0"]
	else:
		withdraws = withdraws_history.get(user['partner_hash'])
		messages = [f"ü§ñ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤: {len(withdraws)}"]

		for _, data in withdraws.items():
			messages.append(f'{data["status"]}\n‚îú {data["date"]}: {data["sum"]}: {data["type"]}')

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup("profile"),
	)


@default_router.callback_query(F.data == "status_levels", only_confirmed)
async def status_levels_callback(call: CallbackQuery):
	# ‚ùå‚úÖüèÜÔ∏èüìäüéØüíºüí∞Ô∏è
	messages = [
		"1. –ù–æ–≤–∏—á–æ–∫: 35 %\n–£—Å–ª–æ–≤–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:",
		"‚ùå –î–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 50 000 —Ä—É–±–ª–µ–π",
		"‚ùå –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: –Ω–µ –º–µ–Ω–µ–µ 100 000 —Ä—É–±–ª–µ–π",
		"‚ùå –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 100\n",
		"2. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 40 %",
		"‚ùå –î–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 150 000 —Ä—É–±–ª–µ–π",
		"‚ùå –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: –Ω–µ –º–µ–Ω–µ–µ 300 000 —Ä—É–±–ª–µ–π",
		"‚ùå –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 200\n",
		"3. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª 45 %",
		"‚ùå –î–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 300 000 —Ä—É–±–ª–µ–π",
		"‚ùå –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: –Ω–µ –º–µ–Ω–µ–µ 600 000 —Ä—É–±–ª–µ–π",
		"‚úÖ –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 400\n",
		"4. –ú–∞—Å—Ç–µ—Ä 50%",
		"‚ùå –î–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 500 000 —Ä—É–±–ª–µ–π",
		"‚ùå –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: –Ω–µ –º–µ–Ω–µ–µ 1 000 000 —Ä—É–±–ª–µ–π",
		"‚ùå –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 600\n",
		"5. –õ–µ–≥–µ–Ω–¥–∞ –°—É–± –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ\n",
		'–°—É–± –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ 1 Win —á–µ—Ä–µ–∑ –Ω–∞—à—É —Å—Å—ã–ª–∫—É. –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é –º—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç 50% –¥–æ 60% –ø—Ä–∏–±—ã–ª–∏ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É. –ò–Ω–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å "–õ–µ–≥–µ–Ω–¥–∞" –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç—É—Å–∞ "–ú–∞—Å—Ç–µ—Ä".\n',
		"<code>–£—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è</code>",
	]

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup("status"),
	)


@default_router.callback_query(F.data == "statistics_online", only_confirmed)
async def statistics_online_callback(call: CallbackQuery):
	# ‚ú®üìäüí∞Ô∏èüéÆÔ∏è
	messages = [
		"‚ú® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n",
		"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –º–Ω–≥–æ–≤–µ–Ω–Ω–æ! –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ @sinwin_alerts_bot, –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:",
		"üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
		"üí∞Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö.",
		"üéÆÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
		"\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —Ä–∞–Ω–µ–µ, –≤ –±–æ—Ç–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
	]

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_online_statistics_markup(),
	)


@default_router.callback_query(F.data == "status", only_confirmed)
async def status_callback(call: CallbackQuery):
	# ‚ùå‚úÖüèÜÔ∏èüìäüéØüíºüí∞Ô∏è
	messages = [
		"üèÜÔ∏è –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –ù–æ–≤–∏—á–æ–∫",
		"üéØ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: 35%\n",
		"üìä –í–∞—à –¥–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: 15 000 RUB",
		"üíº –û–±—â–∏–π –¥–æ—Ö–æ–¥: 100 000 RUB",
		"üí∞Ô∏è –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: 100\n",
		"–£—Å–ª–æ–≤–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:",
		"‚ùå –î–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 50 000 —Ä—É–±–ª–µ–π",
		"‚úÖ –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: –Ω–µ –º–µ–Ω–µ–µ 100 000 —Ä—É–±–ª–µ–π",
		"‚úÖ –ü–µ—Ä–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: –Ω–µ –º–µ–Ω–µ–µ 100\n",
		"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ß–µ–º –¥–æ–ª—å—à–µ –∏ –ª—É—á—à–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ! –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞, –µ—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.",
		"\n<code>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è.</code>\n",
		"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
	]

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_status_markup(),
	)


@default_router.callback_query(F.data == "profile", only_confirmed)
async def profile_callback(call: CallbackQuery):
	if call.from_user.id in config.secrets.ADMINS_IDS:
		balance, status_code = await APIRequest.get("/base/admin_balance")
		messages = [
			f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\nüÜî –í–∞—à ID: {call.from_user.id}",
			"üõ°Ô∏è –í–∞—à —Ö–µ—à: admin\n",
			f"üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {balance['balance']} RUB",
			"‚öñÔ∏è –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω",
			"üèóÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 0",
		]

		await call.message.edit_text(
			"\n".join(messages),
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_profile_markup(),
		)
		return

	partners = await APIRequest.post("/partner/find", {"opts": {"tg_id": call.from_user.id}})
	partner = partners[0]['partners'][-1]

	if not partner['approved']:
		print(partner)
		users[call.from_user.id] = users.get(call.from_user.id, {})
		users[call.from_user.id]['final'] = False
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	partner_hash = partner.get("partner_hash", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
	status = partner.get('status', '–Ω–æ–≤–∏—á–æ–∫')

	reg_date = datetime.fromisoformat(partner.get('register_date'))
	cur_date = datetime.now()
	difference = cur_date - reg_date
	days_difference = max(difference.days, 1)

	messages = [
		f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\nüÜî –í–∞—à ID: {call.from_user.id}",
		f"üõ°Ô∏è –í–∞—à —Ö–µ—à: {partner_hash}\n",
		f"üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner.get('balance', 0.0)} RUB",
		f"‚öñÔ∏è –°—Ç–∞—Ç—É—Å: {status}",
		"üéØ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: 35%\n",
		"üèóÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 0",
		f"‚òØÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –Ω–∞–º–∏: {days_difference}",
		# f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ @IziMin_test_Bot: https://t.me/IziMin_test_Bot?start='
	]

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_profile_markup(),
	)


@default_router.callback_query(F.data == "withdraw", only_confirmed)
async def withdraw_callback(call: CallbackQuery):
	messages = [
		"üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: 0 RUB\n",
		"‚ùóÔ∏è –í–´–í–û–î –°–†–ï–î–°–¢–í –î–û–°–¢–£–ü–ï–ù –û–î–ò–ù –†–ê–ó –í –ù–ï–î–ï–õ–Æ –ö–ê–ñ–î–£–Æ –°–†–ï–î–£ –ü–û –ú–û–°–ö–û–í–°–ö–û–ú–£ –í–†–ï–ú–ï–ù–ò. –ö –í–´–í–û–î–£ –î–û–°–¢–£–ü–ù–ê –í–°–Ø –°–£–ú–ú–ê –ö–û–¢–û–†–ê–Ø –ù–ê–•–û–î–ò–¢–°–Ø –ù–ê –ë–ê–õ–ê–ù–°–ï.‚ùóÔ∏è\n",
		"–í —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –ø—Ä–∏ –±–æ–ª—å—â–æ–º –¥–æ—Ö–æ–¥–µ —Å–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞ –Ω–∞ —Å—Ä–µ–¥—É –≤—ã–≤–µ—Å—Ç–∏ –≤—Å—é —Å—É–º–º—É –ø–æ–ª—É—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é. –û–¥–Ω–∞–∫–æ –≤ —Ç–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —á–∞—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤, –æ—Å—Ç–∞–≤–∏–≤ –Ω–µ–±–æ–ª—å—à–æ–π –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n",
		"–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n",
		"<b>–õ–ò–ú–ò–¢–´ –ù–ê –í–´–í–û–î –°–†–ï–î–°–¢–í</b>\n",
		"üí≥Ô∏è <b>–ö–∞—Ä—Ç–∞</b>",
		" ‚àü VISA, MasterCard: –æ—Ç 2 000 ‚ÇΩ –¥–æ 50 000 ‚ÇΩ\n",
		"üì± <b>–í—ã–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>",
		" ‚àü VISA, MasterCard, –ú–ò–†: –æ—Ç 5 000 ‚ÇΩ –¥–æ 100 000 ‚ÇΩ\n",
		"‚öôÔ∏è <b>Steam</b>",
		" ‚àü –í—ã–≤–æ–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç Steam: –æ—Ç 2 000 ‚ÇΩ –¥–æ 12 000 ‚ÇΩ\n",
		"üå∏ <b>Piastrix</b>",
		"‚àü –æ—Ç 1 800 ‚ÇΩ –¥–æ 100 000 ‚ÇΩ\n",
		"üëæ <b>FK Wallet</b>",
		"‚àü –æ—Ç 1 800 ‚ÇΩ –¥–æ 100 000 ‚ÇΩ\n",
		"üëë <b>–ö—Ä–∏–ø—Ç–∞</b>",
		"‚àü –ü–ª–∞–≤–∞—é—â–∏–µ –ª–∏–º–∏—Ç—ã, —Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –æ—Ç 1 500 ‚ÇΩ –¥–æ 5 000 000 ‚ÇΩ\n",
	]

	try:
		await call.message.edit_text(
			"\n".join(messages),
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_withdraw_markup(),
		)
	except Exception:
		await call.message.delete()
		await call.message.answer(
			"\n".join(messages),
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_withdraw_markup(),
		)


@default_router.callback_query(F.data == "withdraw_crypto", only_confirmed)
async def withdraw_crypto_callback(call: CallbackQuery):
	messages = [
		"–ö–∞–∫—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥?\n",
		"<b>–õ–ò–ú–ò–¢–´ –ù–ê –í–´–í–û–î –°–†–ï–î–°–¢–í</b>",
		"Bitcoin - 10 650 ‚ÇΩ - 665 000 ‚ÇΩ",
		"Ethereum - 1 000 ‚ÇΩ - 665 000 ‚ÇΩ",
		"Tron - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ",
		"Tether ERC20 - 1 500 ‚ÇΩ - 5 000 000 ‚ÇΩ",
		"Tether TRC20 - 1 500 ‚ÇΩ - 5 000 000 ‚ÇΩ",
		"Tether BEP20 - 1 500 ‚ÇΩ - 5 000 000 ‚ÇΩ",
		"BNB ERC20 - 1 500 ‚ÇΩ - 655 070 ‚ÇΩ",
		"Litecoin - 1 500 ‚ÇΩ - 665 000 ‚ÇΩ",
		"Monero - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ",
		"Bitcoin Cash - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ",
		"Dash - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ",
		"Doge - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ",
		"Zcash - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ",
		"Ripple - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ",
		"Stellar - 1 500 ‚ÇΩ - 665 070 ‚ÇΩ",
	]

	await call.message.edit_text(
		"\n".join(messages),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_crypto_withdraw_markup(),
	)


@default_router.callback_query(F.data == "withdraw_card", only_confirmed)
async def withdraw_card_callback(call: CallbackQuery, state: FSMContext):
	users[call.message.chat.id] = {
		"final": True,
		"withdraw_card": True,
	}
	message = "üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: 0 RUB\nüí≥Ô∏è Visa –∏–ª–∏ MasterCard\n–õ–∏–º–∏—Ç –æ–¥–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞: 2 000 ‚ÇΩ - 50 000 ‚ÇΩ\n\n<code>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—ã –±–∞–Ω–∫–æ–≤ –†–§ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π. –ß—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∞—Ç—å –≤—ã–≤–æ–¥—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –°–±–µ—Ä–∞.</code>\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏."

	await call.message.edit_text(
		message,
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup("withdraw"),
	)

	await state.set_state(CardWithdrawGroup.withdraw_sum)


@default_router.message(F.text, CardWithdrawGroup.withdraw_sum, message_only_confirmed)
async def withdraw_card_message(message: Message, state: FSMContext):
	user = users.get(message.chat.id, {})
	
	try:
		partners = await APIRequest.post("/partner/find", {"opts": {"tg_id": message.from_user.id}})
		partner = partners[0]['partners'][-1]
	except Exception as ex:
		await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}',reply_markup=inline.create_back_markup("profile"),)
		return

	try:
		sum_to_withdraw = int(message.text)
	except Exception:
		await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.", reply_markup=inline.create_back_markup("withdraw_card"))
		await state.clear()
		return

	if user.get("final", False) and user.get("withdraw_card", False):
		if partner['balance'] < 2000.0:
			await message.answer(
				"üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: 0 RUB\n\n–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.",
				reply_markup=inline.create_back_markup("withdraw_card"),
			)
			await state.clear()
			user["withdraw_card"] = False
		elif sum_to_withdraw > 50000.0:
			await message.answer(
					f"–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç\n\n–°—É–º–º–∞ ({sum_to_withdraw}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º:",
				reply_markup=inline.create_back_markup("withdraw_card"),
			)
			await state.clear()
			user["withdraw_card"] = False
		elif sum_to_withdraw < 2000.0:
			await message.answer(
					f"–û—à–∏–±–∫–∞: —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞\n\n–°—É–º–º–∞ ({sum_to_withdraw}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º.",
				reply_markup=inline.create_back_markup("withdraw_card"),
			)
			await state.clear()
			user["withdraw_card"] = False
		else:
			await state.update_data(withdraw_sum=sum_to_withdraw)
			await message.answer(f'–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {sum_to_withdraw} ‚ÇΩ\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)', reply_markup=inline.create_back_markup("withdraw_card"),)
			await state.set_state(CardWithdrawGroup.withdraw_card)
	

@default_router.message(F.text, CardWithdrawGroup.withdraw_card, message_only_confirmed)
async def withdraw_withdraw_card_message(message: Message, state: FSMContext):
	text = message.text
	user = users.get(message.chat.id, {})
	status = is_valid_card(text)

	if status is None:
		await state.clear()
		user["withdraw_card"] = False
		await message.answer('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 16 —Ü–∏—Ñ—Ä, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.', reply_markup=inline.create_back_markup("withdraw_card"))
	elif not status:
		await state.clear()
		user["withdraw_card"] = False
		await message.answer('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n\n–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 16 —Ü–∏—Ñ—Ä, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.', reply_markup=inline.create_back_markup("withdraw_card"))
	else:
		await state.update_data(withdraw_card=text)
		data = await state.get_data()
		await message.answer(f'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø—Ä–∏–Ω—è—Ç.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. –°—É–º–º–∞: {data.get("withdraw_sum")} ‚ÇΩ\n\n–ö–∞—Ä—Ç–∞: {text}', reply_markup=inline.create_withdraw_continue_markup())
		await state.set_state(CardWithdrawGroup.approved)


@default_router.callback_query(F.data == 'user_approve_card_withdraw', CardWithdrawGroup.approved, message_only_confirmed)
async def user_approve_card_withdraw(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	user = users.get(call.message.chat.id, {})
	user["withdraw_card"] = False
	partners = await APIRequest.post("/partner/find", {"opts": {"tg_id": call.from_user.id}})
	partner = partners[0]['partners'][-1]
	await state.clear()

	partner_hash = partner.get("partner_hash", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

	result, status = await APIRequest.post("/transaction/create", data={'partner_hash': partner_hash, 'username': str(call.from_user.username),
									'amount': data['withdraw_sum'], 'withdraw_card': data['withdraw_card'], 'approved': False})

	if status != 200:
		await call.answer(f'–æ—à–∏–±–∫–∞: {status}')
		return

	transaction_id = result.get('transaction_id', 0)

	await call.message.edit_text(f'–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\nüõ° –í–∞—à —Ö—ç—à: {partner_hash}\nüÜî ID –í—ã–≤–æ–¥–∞: {transaction_id}\n\n–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞. –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', reply_markup=inline.create_back_markup("profile"))


	tdata = withdraws_history.get(partner_hash, {})
	tdata[transaction_id] = {
		'status': '‚ö™Ô∏è –í—ã–≤–æ–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
		'type': 'üí≥ –ö–∞—Ä—Ç–∞',
		'sum': data['withdraw_sum'],
		'date': datetime.now()
	}
	withdraws_history[partner_hash] = tdata

	transactions_dict[transaction_id] = data

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_message(chat_id=admin, text=f'''Tg id: {call.from_user.id}
–ù–∏–∫: {call.from_user.username}
–†–µ—Ñ–µ—Ä–∞–ª: {partner["is_referal"]}
–•—ç—à: {partner_hash}
Id –í—ã–≤–æ–¥–∞: {transaction_id}
		
–í—ã–≤–æ–¥: üí≥ –ö–∞—Ä—Ç–∞
–°—É–º–º–∞: <code>{data['withdraw_sum']}</code>‚ÇΩ
–ö–∞—Ä—Ç–∞: <code>{data['withdraw_card']}</code>''', parse_mode=ParseMode.HTML, reply_markup=inline.create_admin_transaction_menu(transaction_id, admin))


async def send_message_about_transaction_to_user(sum_to_withdraw, partner_hash: str, transaction_id: int, scheduler):
	partners = await APIRequest.post("/partner/find", {"opts": {"partner_hash": partner_hash}})
	partner = partners[0]['partners'][-1]

	transactions = await APIRequest.post("/transaction/find", {"opts": {"id": transaction_id}})
	transac = transactions[0]['transactions'][-1]

	scheduler.remove_job(f'sendtransac_{transaction_id}')

	partner['balance'] -= int(sum_to_withdraw.replace(' ', ''))

	transactions_schedulded[transaction_id] = False

	tdata = withdraws_history.get(partner_hash, {})
	tdata[transaction_id] = {
		'status': 'üü¢ –í—ã–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω',
		'type': 'üí≥ –ö–∞—Ä—Ç–∞',
		'sum': transac['amount'],
		'date': datetime.now()
	}
	withdraws_history[partner_hash] = tdata

	await APIRequest.post("/partner/update", {**partner})

	await bot.send_message(chat_id=partner["tg_id"], text=f'‚úÖ–í–∞—à –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –≤—ã–ø–ª–∞—Ç–µ. –°—Ä–µ–¥—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\nüõ° –í–∞—à —Ö—ç—à: {partner_hash}\nüÜî ID –í—ã–≤–æ–¥–∞: {transaction_id}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', reply_markup=inline.create_back_markup('profile'))


async def send_message_about_ftransaction_to_user(reason, sum_to_withdraw, partner_hash: str, transaction_id: int, scheduler):
	#üü¢üü°‚ö™Ô∏è
	partners = await APIRequest.post("/partner/find", {"opts": {"partner_hash": partner_hash}})
	partner = partners[0]['partners'][-1]

	transactions = await APIRequest.post("/transaction/find", {"opts": {"id": transaction_id}})
	transac = transactions[0]['transactions'][-1]

	scheduler.remove_job(f'fsendtransac_{transaction_id}')

	transactions_schedulded[transaction_id] = False

	tdata = withdraws_history.get(partner_hash, {})
	tdata[transaction_id] = {
		'status': 'üü° –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω',
		'type': 'üí≥ –ö–∞—Ä—Ç–∞',
		'sum': transac['amount'],
		'date': datetime.now()
	}
	withdraws_history[partner_hash] = tdata

	reason = f'–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {reason}\n' if reason is not None else reason

	await bot.send_message(chat_id=partner["tg_id"], text=f'''
‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.

üõ° –í–∞—à —Ö—ç—à: {partner_hash}
üÜî ID –í—ã–≤–æ–¥–∞: {transaction_id}
{reason if reason is not None else ""}
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.	
''', reply_markup=inline.create_support_transac_markup())



@default_router.callback_query(F.data.startswith('badmin_approve_transaction'))
async def admin_approve_transaction(call: CallbackQuery, scheduler = scheduler):
	transaction_id = int(call.data.replace('badmin_approve_transaction', '').split('_')[0])
	await call.answer()

	transactions = await APIRequest.post("/transaction/find", {"opts": {"id": transaction_id}})
	transaction = transactions[0]['transactions'][-1]

	if transactions_schedulded.get(transaction["id"], False):
		await call.answer(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction["id"]} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
		return

	transaction['approved'] = True

	await APIRequest.post("/transaction/update", {**transaction})

	data = transactions_dict.get(transaction_id, {})
	sum_to_withdraw = f'{data["withdraw_sum"]:,}'.replace(',', ' ')

	scheduler.add_job(send_message_about_transaction_to_user, trigger=IntervalTrigger(seconds=180), args=(sum_to_withdraw, transaction["partner_hash"], transaction_id, scheduler), id=f'sendtransac_{transaction_id}', replace_existing=True)

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_message(chat_id=admin, text=f'''‚úÖ–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω

üôé‚Äç‚ôÇÔ∏è –ù–∏–∫: {transaction["username"]}
üõ° –•—ç—à: {transaction["partner_hash"]}
üÜî ID –í—ã–≤–æ–¥–∞: {transaction_id}

–í—ã–≤–æ–¥: üí≥ –ö–∞—Ä—Ç–∞
–°—É–º–º–∞: {sum_to_withdraw}
–ö–∞—Ä—Ç–∞: <code>{data["withdraw_card"]}</code>''', parse_mode=ParseMode.HTML, reply_markup=inline.admin_change_transaction(transaction_id))


@default_router.callback_query(F.data.startswith('badmin_disapprove_transaction'))
async def badmin_dispprove_transaction(call: CallbackQuery, state: FSMContext):
	transaction_id = int(call.data.replace('badmin_disapprove_transaction', '').split('_')[0])
	admin_id = call.data.split('_')[-1]

	transactions = await APIRequest.post("/transaction/find", {"opts": {"id": transaction_id}})
	transaction = transactions[0]['transactions'][-1]

	if transactions_schedulded.get(transaction["id"], False):
		await call.answer(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction["id"]} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
		return

	transaction['approved'] = True

	await APIRequest.post("/transaction/update", {**transaction})

	#scheduler.add_job(send_message_about_transaction_to_user, trigger=IntervalTrigger(seconds=180), args=(sum_to_withdraw, transaction["partner_hash"], transaction_id, scheduler), id=f'sendtransac_{transaction_id}', replace_existing=True)

	await bot.send_message(chat_id=admin_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞', reply_markup=inline.create_cancel_reason_markup(transaction_id))
	await state.update_data(transac=transaction)
	await state.set_state(CancelTransaction.cancel_reason)


@default_router.callback_query(F.data == 'empty_cancel_reason', CancelTransaction.cancel_reason)
async def empty_cancel_reason(call: CallbackQuery, state: FSMContext, scheduler = scheduler):
	await state.update_data(cancel_reason=None)

	data = await state.get_data()
	data = data['transac']

	transactions = await APIRequest.post("/transaction/find", {"opts": {"id": data['id']}})
	transaction = transactions[0]['transactions'][-1]

	transaction['approved'] = False

	await APIRequest.post("/transaction/update", {**transaction})
	sum_to_withdraw = f'{transaction["amount"]:,}'.replace(',', ' ')

	if transactions_schedulded.get(transaction["id"], False):
		await call.answer(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction["id"]} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
		return

	scheduler.add_job(send_message_about_ftransaction_to_user, trigger=IntervalTrigger(seconds=180), args=(None, sum_to_withdraw, transaction["partner_hash"], transaction['id'], scheduler), 
	id=f'fsendtransac_{transaction["id"]}', replace_existing=True)


	for admin in config.secrets.ADMINS_IDS:
		await bot.send_message(chat_id=admin, text=f'''
‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω

üôé‚Äç‚ôÇÔ∏è –ù–∏–∫: {transaction["username"]}
üõ° –•—ç—à: {transaction["partner_hash"]}
üÜî ID –í—ã–≤–æ–¥–∞: {transaction["id"]}

–í—ã–≤–æ–¥: üí≥ –ö–∞—Ä—Ç–∞
–°—É–º–º–∞: {sum_to_withdraw}
–ö–∞—Ä—Ç–∞: <code>{transaction["withdraw_card"]}</code>	
''', parse_mode=ParseMode.HTML, reply_markup=inline.admin_change_transaction(transaction["id"]))


@default_router.message(F.text, CancelTransaction.cancel_reason)
async def empty_cancel_reaso_msgn(message: Message, state: FSMContext, scheduler=scheduler):
	await state.update_data(cancel_reason=message.text)

	data = await state.get_data()
	data = data['transac']

	transactions = await APIRequest.post("/transaction/find", {"opts": {"id": data['id']}})
	transaction = transactions[0]['transactions'][-1]

	if transactions_schedulded.get(transaction["id"], False):
		await message.answer(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction["id"]} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
		return

	transaction['approved'] = False

	await APIRequest.post("/transaction/update", {**transaction})
	sum_to_withdraw = f'{transaction["amount"]:,}'.replace(',', ' ')

	scheduler.add_job(send_message_about_ftransaction_to_user, trigger=IntervalTrigger(seconds=180), args=(message.text, sum_to_withdraw, transaction["partner_hash"], transaction['id'], scheduler), 
	id=f'fsendtransac_{transaction["id"]}', replace_existing=True)

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_message(chat_id=admin, text=f'''
‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω
–ü—Ä–∏—á–∏–Ω–∞: {message.text}

üôé‚Äç‚ôÇÔ∏è –ù–∏–∫: {transaction["username"]}
üõ° –•—ç—à: {transaction["partner_hash"]}
üÜî ID –í—ã–≤–æ–¥–∞: {transaction["id"]}

–í—ã–≤–æ–¥: üí≥ –ö–∞—Ä—Ç–∞
–°—É–º–º–∞: {sum_to_withdraw}
–ö–∞—Ä—Ç–∞: <code>{transaction["withdraw_card"]}</code>
''', parse_mode=ParseMode.HTML, reply_markup=inline.admin_change_transaction(transaction["id"]))


@default_router.callback_query(F.data.startswith('change_transaction_status'))
async def change_transaction_status(call: CallbackQuery):
	transaction_id = int(call.data.replace('change_transaction_status', ''))

	transactions = await APIRequest.post("/transaction/find", {"opts": {"id": transaction_id}})
	transaction = transactions[0]['transactions'][-1]

	if transactions_schedulded.get(transaction["id"], False):
		await call.answer(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction["id"]} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
		return

	partners = await APIRequest.post("/partner/find", {"opts": {"partner_hash": transaction['partner_hash']}})
	partner = partners[0]['partners'][-1]

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_message(chat_id=admin, text=f'''Tg id: {call.from_user.id}
–ù–∏–∫: {call.from_user.username}
–†–µ—Ñ–µ—Ä–∞–ª: {partner["is_referal"]}
–•—ç—à: {transaction['partner_hash']}
Id –í—ã–≤–æ–¥–∞: {transaction_id}
		
–í—ã–≤–æ–¥: üí≥ –ö–∞—Ä—Ç–∞
–°—É–º–º–∞: <code>{transaction['amount']}</code>‚ÇΩ
–ö–∞—Ä—Ç–∞: <code>{transaction['withdraw_card']}</code>''', parse_mode=ParseMode.HTML, reply_markup=inline.create_admin_transaction_menu(transaction_id, admin))


@default_router.message(F.text)
async def text_handler(message: Message):
	user = users.get(message.chat.id, {})
	await message.delete()

	if user.get("final", False):
		await message.answer(
			"üè†Ô∏è <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!</b>\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SinWin!",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_main_menu_markup(),
		)
		return
	
	await message.answer(
		"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –≠—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç.",
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_start_markup(),
	)


@default_router.callback_query(F.data == "withdraw_steam", message_only_confirmed)
async def withdraw_steam_callback(call: CallbackQuery, state: FSMContext):
	message = "üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: 0 RUB\n–í—ã–≤–æ–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç Steam\n–õ–∏–º–∏—Ç –æ–¥–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞: –æ—Ç 2 000 ‚ÇΩ –¥–æ 12 000 ‚ÇΩ\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏."

	await call.message.edit_text(
		message,
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup("withdraw"),
	)

	await state.set_state(SteamWidthDrawGroup.withdraw_sum)


@default_router.message(F.text, SteamWidthDrawGroup.withdraw_sum, message_only_confirmed)
async def withdraw_steam_message(message: Message, state: FSMContext):
	await message.edit_text(
		"üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: 0 RUB\n\n–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.",
		reply_markup=inline.create_back_markup("withdraw"),
	)

	await state.clear()
