@default_router.callback_query(F.data == 'withdraw_steam', message_only_confirmed)
async def withdraw_steam_callback(call: CallbackQuery, state: FSMContext):
	await state.clear()

	users[call.message.chat.id] = {
		'final': True,
		'withdraw_card': True,
	}

	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]

	if not partner['approved']:
		print(partner)
		users[call.from_user.id] = users.get(call.from_user.id, {})
		users[call.from_user.id]['final'] = False
		await call.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
		return

	message = f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n–í—ã–≤–æ–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç Steam\n–õ–∏–º–∏—Ç –æ–¥–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞: –æ—Ç 2 000 ‚ÇΩ –¥–æ 12 000 ‚ÇΩ\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.'

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/steam.jpg')

	await call.message.edit_media(
		InputMediaPhoto(media=image, caption=message, parse_mode=ParseMode.HTML),
		parse_mode=ParseMode.HTML,
		reply_markup=inline.create_back_markup('withdraw'),
	)

	await state.set_state(SteamWithdrawGroup.withdraw_sum)


@default_router.message(F.text, SteamWithdrawGroup.withdraw_sum, message_only_confirmed)
async def withdraw_steam_message(message: Message, state: FSMContext):
	user = users.get(message.chat.id, {})

	try:
		partners = await APIRequest.post(
			'/partner/find', {'opts': {'tg_id': message.from_user.id}}
		)
		partner = partners[0]['partners'][-1]
	except Exception as ex:
		await message.answer(
			f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}',
			reply_markup=inline.create_back_markup('profile'),
		)
		return

	try:
		sum_to_withdraw = int(message.text)
	except Exception:
		await message.answer(
			'–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.',
			reply_markup=inline.create_back_markup('withdraw_steam'),
		)
		await state.clear()
		return

	if user.get('final', False) and user.get('withdraw_card', False):
		if partner['balance'] < sum_to_withdraw:
			await message.answer(
				f'üí∞Ô∏è –ë–∞–ª–∞–Ω—Å: {partner["balance"]} RUB\n\n–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.',
				reply_markup=inline.create_back_markup('withdraw_steam'),
			)
			await state.clear()
			user['withdraw_card'] = False
		elif sum_to_withdraw > 12000.0:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç\n\n–°—É–º–º–∞ {sum_to_withdraw} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º:',
				reply_markup=inline.create_back_markup('withdraw_steam'),
			)
			await state.clear()
			user['withdraw_card'] = False
		elif sum_to_withdraw < 2000.0:
			await message.answer(
				f'–û—à–∏–±–∫–∞: —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞\n\n–°—É–º–º–∞ {sum_to_withdraw} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º.',
				reply_markup=inline.create_back_markup('withdraw_steam'),
			)
			await state.clear()
			user['withdraw_card'] = False
		else:
			await state.update_data(withdraw_sum=sum_to_withdraw)
			await message.answer(
				f"–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {sum_to_withdraw} ‚ÇΩ\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ steam\n\n–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤–∞—à Steam login –∫–ª–∏–∫–Ω—É–≤ –ø–æ <a href='https://store.steampowered.com/account/'>–ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ</a>",
				reply_markup=inline.create_back_markup('withdraw_steam'),
			)
			await state.set_state(SteamWithdrawGroup.withdraw_card)


@default_router.message(
	F.text, SteamWithdrawGroup.withdraw_card, message_only_confirmed
)
async def withdraw_withdraw_steam_message(message: Message, state: FSMContext):
	text = message.text

	await state.update_data(withdraw_card=text)
	data = await state.get_data()
	await message.answer(
		f'–õ–æ–≥–∏–Ω Steam –ø—Ä–∏–Ω—è—Ç.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. –°—É–º–º–∞: {data.get("withdraw_sum")} ‚ÇΩ\n\nSteam: {text}',
		reply_markup=inline.create_withdraw_continue_markup(withdraw='steam'),
	)
	await state.set_state(SteamWithdrawGroup.approved)


@default_router.callback_query(
	F.data == 'user_approve_steam_withdraw',
	SteamWithdrawGroup.approved,
	message_only_confirmed,
)
async def user_approve_steam_withdraw(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	user = users.get(call.message.chat.id, {})
	user['withdraw_card'] = False
	partners = await APIRequest.post(
		'/partner/find', {'opts': {'tg_id': call.from_user.id}}
	)
	partner = partners[0]['partners'][-1]
	await state.clear()

	partner_hash = partner.get('partner_hash', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')

	result, status = await APIRequest.post(
		'/transaction/create',
		data={
			'partner_hash': partner_hash,
			'username': str(call.from_user.username),
			'amount': data['withdraw_sum'],
			'withdraw_card': data['withdraw_card'],
			'approved': False,
			'preview_id': int(
				f'{datetime.now().strftime("%Y%m%d%H%M%S")}{randint(1000, 9999)}'
			),
		},
	)

	if status != 200:
		await call.answer(f'–æ—à–∏–±–∫–∞: {status}')
		return

	transaction_id = result.get('transaction_id', 0)

	transactions = await APIRequest.post(
		'/transaction/find', {'opts': {'id': transaction_id}}
	)
	transac = transactions[0]['transactions'][-1]

	await call.message.edit_text(
		f'–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\nüõ° –í–∞—à —Ö—ç—à: {partner_hash}\nüÜî ID –í—ã–≤–æ–¥–∞: {transac["preview_id"]}\n\n–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞. –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
		reply_markup=inline.create_back_markup('profile'),
	)

	tdata = withdraws_history.get(partner_hash, {})
	tdata[transac['preview_id']] = {
		'status': '‚ö™Ô∏è –í—ã–≤–æ–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
		'type': '‚öôÔ∏è Steam',
		'sum': data['withdraw_sum'],
		'date': datetime.now(),
	}
	withdraws_history[partner_hash] = tdata

	transactions_dict[transaction_id] = data

	image = FSInputFile(path=f'{config.SINWIN_DATA}/main/steam.jpg')

	for admin in config.secrets.ADMINS_IDS:
		await bot.send_photo(
			chat_id=admin,
			photo=image,
			caption=f"""Tg id: {call.from_user.id}
–ù–∏–∫: {call.from_user.username}
–†–µ—Ñ–µ—Ä–∞–ª: {partner['is_referal']}
–•—ç—à: {partner_hash}
Id –í—ã–≤–æ–¥–∞: {transac['preview_id']}

–í—ã–≤–æ–¥: ‚öôÔ∏è Steam
–°—É–º–º–∞: <code>{data['withdraw_sum']}</code>‚ÇΩ
Steam –ª–æ–≥–∏–Ω: <code>{data['withdraw_card']}</code>""",
			parse_mode=ParseMode.HTML,
			reply_markup=inline.create_admin_transaction_menu(
				transaction_id, admin, 'steam'
			),
		)
